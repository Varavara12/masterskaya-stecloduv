function scrollbarWidth() {
    var div = $('<div style="width:500px;height:500px;overflow:hidden;position:absolute;top:-2000px;left:-2000px;"><div style="height:100px;"></div>');
    $('body').append(div);
    var w1 = $('div', div).innerWidth();
    div.css('overflow-y', 'scroll');
    var w2 = $('div', div).innerWidth();
    $(div).remove();
    return (w1 - w2);
};
function dataClone(data) {
	var ret = {};
	for(var key in data) {
		if(typeof data[key] == 'object') 
			ret[key] = dataClone(data[key]);
		else ret[key] = data[key];
	}
	return ret;
}
function htmlspecialchars(str) {
	return str;
	//return str.replace('&amp;', '&');
};

decodeURIComponent_native = decodeURIComponent;

var decodeURIComponent = function decodeURIComponent( str ) {
    var out = '', arr, i = 0, l, x;
    arr = str.split(/(%(?:D0|D1)%.{2})/);
    for ( l = arr.length; i < l; i++ ) {
        try {
            x = decodeURIComponent_native( arr[i] );
        } catch (e) {
            x = arr[i];
        }
        out += x;
    }
    return out;
}

String.prototype.replaceAll = function(from, to) { 
   return this.split(from).join(to); 
} 
function trim(string) {
	return string.replace(/(^\s+)|(\s+$)/g, "");
};
$.cssHooks["transform"] = {
    get: function(elem, computed, extra) {return ""},
    set: function(elem, value) {
		$(elem).css({"-moz-transform":"rotate("+value+"deg)","-webkit-transform":"rotate("+value+"deg)","-o-transform":"rotate("+value+"deg)"});
    }
}
var list = {
	length: 0,
	count: function() {
		var count = 0;
		for(var i=0; i< this.length; i++) if(this[i] != undefined) count++;
		
		return count;
	},
	remove: function(index) {
		return delete this[index];
	}, 
};
$.fn.extend({
	cssToInt: function(key) {
		var v = parseInt(this.css(key));
		if (isNaN(v))
			return false;
		return v;
	},
	disableSelection : function() {
		this.each(function() {
			this.onselectstart = function() { return false; };
			this.unselectable = "on";
			$(this).css('-moz-user-select', 'none');
		});
		return this;
	},
	enableSelection : function() {
		this.each(function() {
			this.onselectstart = function() {};
			this.unselectable = "off";
			$(this).css('-moz-user-select', 'auto');
		});
		return this;
	}
});

$(document).ready(function(){
	$('#wait').show();
	var mouseInDrag = false;
	cat = {
		log: function(text) {
			now = new Date();
			var time = now.getHours()+':'+now.getMinutes()+':'+now.getSeconds();
			var log = '['+time+'] '+text;
			console.log(log);
			return true;
		},
		v: '01-01-01',
		check: function(){
			this.s.check();
			return this;
		},
		redraw: function(){
			$('.a-2-step').hide().eq(cat.s.current).show();
			this.s.redraw();
			//this.check();
			this.versions.autosave.start();
			return this;
		},
		autosave: function(){
			this.versions.autosave.run();
		},
		bind: function(){
			window.onbeforeunload = function() { return 'Закрыв редактор котолога, не сохраненные данные будут утеряны, продолжить?'; };
			s.window.open('a-wp1');
			$(window).keydownKey(27, function() {
				var menu = $('#a-1-menu');
				if(menu.css('top') == '0px' && $('#a-wp1').scrollTop() > 20) menu.stop().animate({top:-50},{duration:300,easing: 'easeOutBounce'});
				else menu.stop().animate({top:0},{duration:300,easing: 'easeOutBounce'});
			});
			$('#a-wp1').on({
				scroll:function(event){
					var menu = $('#a-1-menu');
					var scrollTop = $(this).scrollTop();
					var menuHeight = menu.height()-8;
					if(scrollTop > 20) menu.stop().animate({top:-50},{duration:300,easing: 'easeOutBounce'});
					else menu.stop().animate({top:0},{duration:300,easing: 'easeOutBounce'});
					
				}
			});
		
			$('#a-1').on({
				mouseover: function(event){
					var body = $('#a-wp1');
					var menu = $('#a-1-menu');
					var scrollTop = body.scrollTop();
					if(scrollTop > 20) menu.stop().animate({top:0},{duration:300,easing: 'easeOutBounce'});
				},
				mouseout: function(event){
					var body = $('#a-wp1');
					var menu = $('#a-1-menu');
					var scrollTop = body.scrollTop();
					if(scrollTop > 20) menu.stop().animate({top:-50},{duration:300,easing: 'easeOutBounce'});
				}
			});
		
			this.view.bind();
			this.versions.bind();
			this.s.bind();
			return this;
		},
		view: {
			bind: function(){
				$('#a2-wp1').click(function(){
					$('#a2-wp1').hide();
					$('#a-wp1').show();
				});
			
				this.pages.bind();
			},
			load: function(data){
				if(cat.s[4].ready) {
					this.pages.load();
				};
				return this;
			},
			init: function(data) {
				if(cat.s[4].ready) {
					this.pages.init(data);
				};
				return this;
			},
			redraw: function() {
				if(cat.s[4].ready) {
					$('#a-wp1').hide();
					$('#a2-wp1').show().empty();
					this.pages.redraw();
				};
				return this;
			},
			pages: {
				prefix: 'a2-page-sa-slot-',
				bind: function(){
					this.slots.bind();
				},
				load: function() {
					this.slots.load();
				},
				init: function(data){
					this.path = cat.s[0].design.path;
					if(data != undefined && data.convert) {
						this.design = cat.s[0].design.get(1415);
						this.grid = cat.s[1].s[1].preview.getGrid({width:1000,prefix:this.prefix});
						$('body').addClass('pdf').css({overflow:''});
						$('#body').hide();
						cat.view.convert = true;
					} else {
						this.design = cat.s[0].design.get(1415);
						this.grid = cat.s[1].s[1].preview.getGrid({width:1000,prefix:this.prefix});
						$('body').removeClass('pdf').css({overflow:'hidden'});
						cat.view.convert = false;
					};
					this.text = cat.s[3].text;
					this.length = 0;
					this.slots.init();
				},
				redraw: function(){
					this.add('front');
					var count = cat.s[2].pages.realCount(this.grid);
					
					for(var i=0; i < count; i++) {
						if (i%2==1) this.add('left'); 
						else this.add('right');
					};
					this.add('back');
					this.slots.redraw();
				},
				add: function(type){
					var main = (cat.view.convert) ? $('body') : $('#a2-wp1');
					var index = this.length++;
					var page = $('<div class = "a2-page a2-'+type+'"></div>').css({
						backgroundImage: 'url("' + this.path.root + this.design.name + this.path.postfix.pdf[type] + '")'
					});	/*
						var css = {};
						var fontFamily = $(cat.s[0].design.current).data().design.sa.css.fontFamily;
						var color = $(cat.s[0].design.current).data().design.sa.css.color;
						if(fontFamily != undefined) css.fontFamily = fontFamily;
						if(color != undefined) css.color = color;
					*/
					var types = this.design.types;
					for(var key in this.design.types) {
						var val = this.design.types[key];
						var css = this.design.css[type][key];
						if(css != undefined) {
							var text = this.text[key] == undefined ? (val.required ? val.name : '') : this.text[key];
							//var text = this.text[key] == undefined ? '' : this.text[key];
							//text = text == '' ? 
							//var field = $('<div class = "a2-field"></div>').html(html_entity_decode(text).replaceAll(" ", "&nbsp")).css(css);
							var field = $('<div class = "a2-field"></div>').html(html_entity_decode(text).replaceAll(" ", "&nbsp;").replaceAll("	", "&nbsp;").replaceAll("\n", "<br>")).css(css);
							page.append(field);
						}
					};
					
					this[index] = {e:page};
					if(type == 'left' || type == 'right') {
						var sa = $('<div class = "a2-page-sa"></div>').appendTo(page).css(this.design.sa.css);
						page.data('type', type);
						this[index].sa = sa;
					}
					if(cat.view.convert) page.append('<br>');
					main.append(page);
					
				},
				slots: {
					bind: function(){
						this.goods.bind();
					},
					load: function() {
						this.goods.load();
					},
					init: function(){
						this.length = 0;
						var slots = cat.s[2].slots;
						for(var i = 0; i<slots.length; i++) {
							if(slots[i] != undefined) {
								this[i] = {
									index: slots[i].index
								};
								if(slots[i].goods != undefined) {
									this[i].goods = {
										index: slots[i].goods.index,
										data: slots[i].goods.data
									}
								};
								this.length = this.length > i ? this.length + 1 : i + 1;
							};
						};
						this.goods.init();
					},
					redraw: function(){
						//var count = cat.view.pages.length;
						this.build();
						this.goods.redraw();
					},
					max: function() {
						var max = 0;
						for(var i=0;i<this.length;i++) if(this[i] != undefined && this[i].goods != undefined && max < i) max = i + 1;
						return max;						
					},
					build: function() {
						var slotsInPage = cat.view.pages.grid.size.h * cat.view.pages.grid.size.w;
						var pages = cat.view.pages;
						var width = Math.floor((100 / cat.view.pages.grid.size.w) * 10) / 10 + '%';
						var height = Math.floor((100 / cat.view.pages.grid.size.h) * 10) / 10 + '%';
						for(var i=1; i < pages.length-1; i++) {
							var startSlot = (i-1) * slotsInPage;
							var sa = pages[i].sa;
							for(var k = startSlot; ((k < slotsInPage + startSlot) && k < this.length); k++) {
								if(this[k] != undefined) {
									var e = $('<div style = "width:'+width+';height:'+height+'" class = "a2-page-sa-slot"></div>');
									sa.append(e);
									this[k].e = e;
								};
							};
						};
					},
					goods: {
						bind: function(){
							
						},
						load: function(){
						
						},
						init: function(){
							this.length = 0;
							this.cell = cat.view.pages.grid.cell;
							var slots = cat.view.pages.slots;
							for(var i=0; i < slots.length; i++) {
								if(slots[i] != undefined && slots[i].goods != undefined) { 
									var index = this.length++;
									this[index] = slots[i].goods;
									this[index].index = index;
									this[index].slot = slots[i];
								};
							};
						},
						redraw: function(){	
							for(var i = 0; i < this.length; i++) {
								var data = this[i].data;
								var cell = $(this.cell);
								var img = (data.img == undefined) ? $() : $('<img src = "'+data.img.src+'" class = "'+cat.view.pages.prefix + 'cell-img-e">');
								var imgWp = $('<div style = "position:relative;margin:0 auto;height:100%;" class = "'+cat.view.pages.prefix + 'cell-img-wp"></div>');
								var name = (data.name == undefined) ? '' : data.name;
								var code = (data.code == undefined) ? '' : 'Арт.: ' + data.code;
								var price = (data.price == undefined) ? '' : 'Цена: ' + data.price;
								var sprice = (data.sprice == undefined) ? '' : 'Опт. цена: ' + data.sprice;
								var desc = (data.desc == undefined) ? '' : data.desc;
								var exist = (data.exist == undefined) ? '' : (data.exist == 1 ? 'В наличие' : (data.exist = 2 ? 'На складе' : ''));
								var cellImg = cell.find('.' + cat.view.pages.prefix + 'cell-img');
								var cellName = cell.find('.' + cat.view.pages.prefix + 'cell-name')
								var cellCode = cell.find('.' + cat.view.pages.prefix + 'cell-code')
								var cellPrice = cell.find('.' + cat.view.pages.prefix + 'cell-price');
								var cellSprice = cell.find('.' + cat.view.pages.prefix + 'cell-sprice');
								var cellDesc = cell.find('.' + cat.view.pages.prefix + 'cell-desc');
								var cellExist = cell.find('.' + cat.view.pages.prefix + 'cell-exist');
								
								cellImg.data('img', data.img); cellImg.html(imgWp.html(img));
								cellName.html(name.replaceAll(" ", "&nbsp;").replaceAll("	", "&nbsp;").replaceAll("\n", "<br>"));
								cellCode.html(code.replaceAll(" ", "&nbsp;").replaceAll("	", "&nbsp;").replaceAll("\n", "<br>"));
								cellPrice.html(price.replaceAll(" ", "&nbsp;").replaceAll("	", "&nbsp;").replaceAll("\n", "<br>"));
								cellSprice.html(sprice.replaceAll(" ", "&nbsp;").replaceAll("	", "&nbsp;").replaceAll("\n", "<br>"));
								cellExist.html(exist);
								cellDesc.html(desc.replaceAll(" ", "&nbsp;").replaceAll("	", "&nbsp;").replaceAll("\n", "<br>"));
								cell.appendTo(this[i].slot.e);
							};
							var cellImg = $(this.cell).find('.' + cat.view.pages.prefix + 'cell-img');
							$('.'+cat.view.pages.prefix + 'cell-img-wp').each(function(){
								var imgWp = $(this);
								var img = $(this).find('.'+cat.view.pages.prefix + 'cell-img-e');
								var imgData = $(this).parent().data().img;
								if(imgData != undefined) {
									var widthRate = cellImg.width() / imgData.width;
									var heightRate = cellImg.height() / imgData.height;
									imgCss = (imgData.height * widthRate <  cellImg.height()) ? {
										height:parseInt(imgData.height*widthRate)+'px',
										width:parseInt(imgData.width*widthRate)+'px'
									} : {
										height:parseInt(imgData.height*heightRate)+'px',
										width:parseInt(imgData.width*heightRate)+'px'
									};
									img.css(imgCss);
									imgWp.width(img.width());
								}
							});
						},
					}
				}
			}
		},
		load: function(data) {
			var data = (data == undefined) ? {} : data;
			//if (data.v == undefined || parseInt(data.v) < parseInt(this.v)) alert('Версия редактора обновлена. Каталог необхоимо пересоздать иначе возможны ошибки');
			
			this.versions.autosave.stop();

			this.d = dataClone(data);
			this.cid = parseInt(data.cid);
			if(data.vid != undefined) this.vid = parseInt(data.vid);
			this.name = data.name;
			this.versions.load(data.versions);
			this.imgs.load(data.imgs);
			this.s.load(data.s);
			return this;
		},
		init: function() {
			this.h = $('input[name=h]').val();
			this.s.init();
			this.s.check();
			return this;
		},
		save: function() {
			return {
				name: this.name,
				cid: this.cid,
				v: this.v,
				vid: this.vid,
				s: dataClone(this.s.save())
			};
		},
		exit: function() {
			window.location = '/';
			return this;
		},
		versions: {
			cache:{},
			bind: function(){
				var writeWindow = this.writeWindow;
				
				$('#a-1-version .win-inner').click(function(event){event.stopPropagation();});
				$('#a-1-save-new').click(function(){writeWindow.open();});
				$('#a-1-save .a-1-sublist-wp .a-1-list-item').live('click',function(){if(confirm('Перезаписав запись, данные в ней будут обновлены, продолжить?')) writeWindow.open($(this).data().version);});
				$('#a-1-load .a-1-list-item').live('click',function(){if(confirm('Загрузив запись, Вы потеряете все не сохраненные данные, продолжить?')) cat.versions.read(this)})
				$('#a-1-save-current').live('click', function(){writeWindow.open(cat.versions.get(cat.vid));});

				this.htt = $().simpleTooltipInit({
					name: "tt",
					offsetx: 10,
					position: 'center-right'
				});
				
				this.writeWindow.bind();
				this.autosave.bind();
			},
			list: {},
			autosave: {
				activated: false,
				timeout: 60000,
				interval: 600000,
				list: [],
				bind: function(){
					this.edited = false;
					var autosave = this;
					$(document).everyTime(this.interval, 'autosave2', function(){
						if(autosave.edited && autosave.activated) {
							autosave.edited = false; 
						};
					});
				},
				run: function(){
					this.edited = true;
					
					if(this.activated) {
						var autosave = this;
						var versions = cat.versions;
						$(document).stopTime('autosave1').oneTime(this.timeout, 'autosave1', function() {
							if(autosave.list.length < 4) {
								cat.versions.write({type:3});
							} else {
								cat.versions.write({type:4,vid:autosave.list[0]});
							};
							site.popupmsg({text:''+versions.current().name+' - автозапись'})
							autosave.edited = false;
						});
					};
				},
				start: function(){
					this.activated = true;
				},
				stop: function(){
					this.activated = false;
				},
				add: function(version){
					this.list.push(version.vid);
				},
				remove: function(vid){
					var index = -1
					for(var i = 0; i<this.list.length;i++) if(this.list[i] == vid) {index = i; break;};
					if(index > -1) this.list.splice(index,1);
				}
			},
			writeWindow: {
				bind: function(){
					var writeWindow = this;
					$('#a-1-version-save').on('click', function(){
						writeWindow.submit();
					});
				},
				open: function(version){
					if(version != undefined){
						this.version = version;
						$('#a-1-version-name').val(this.version.name);
						
					s.window.open('a-1-newVersion');
					$('#a-1-version-name').focus();
					} else {
						if(cat.versions.countWrite() < 10) {
							delete this.version;
							$('#a-1-version-name').val('');
							s.window.open('a-1-newVersion');
							$('#a-1-version-name').focus();
						} else {
							s.window.msg.show('.::.', 'Количество записей максимальное'); 
							return false;
						};
					};
					 return true;
				},
				close: function(){
					s.window.close('a-1-newVersion');
				},
				
				submit: function(){
					var name = $('#a-1-version-name').val();
					if(name != "") {
						if(this.version == undefined) cat.versions.write({type:1,name:name});
						else cat.versions.write({type:2,vid:this.version.vid,name:name});
					} else s.window.msg.show('.::.', 'Введите название записи');
				}
			},
			write: function(o) {
				var save = cat.save();
				var writeWindow = this.writeWindow;
				o.silent = typeof o.silent == 'boolean' ? o.silent : false;
				o.onJSON = typeof o.onJSON == 'function' ? o.onJSON : function(){};
				
				if(o.type == 1) var data = 'h='+cat.h+'&type='+o.type+'&name='+o.name+'&data=' + encodeURIComponent($.toJSON(save));
				else if (o.type == 2) var data = 'h='+cat.h+'&type='+o.type+'&name='+o.name+'&vid='+o.vid+'&data=' + encodeURIComponent($.toJSON(save));
				else if (o.type == 3) {
					var name = this.current() == undefined ? 'Автозапись' : this.current().name + ' [АВТО]';
					var data = 'h='+cat.h+'&type='+o.type+'&name='+name+'&cvid='+cat.vid+'&data=' + encodeURIComponent($.toJSON(save));
				} else if (o.type == 4) {
					var name = this.current() == undefined ? 'Автозапись' : this.current().name + ' [АВТО]';
					var data = 'h='+cat.h+'&type='+o.type+'&name='+name+'&cvid='+cat.vid+'&vid='+o.vid+'&data=' + encodeURIComponent($.toJSON(save));
				}
				else return false;
				o.onJSON = typeof o.onJSON == 'function' ? o.onJSON : function(){};
				if(o.type == 1 || o.type == 2) {
					s.ajax({
						url: '?catalog&versions&save',
						data: data,
						silent: o.silent,
						success:{
							onJSON: function(request) {
								o.onJSON(request);
								if(request.err != undefined) {
									if(request.err == 0) {
										switch(o.type) {
											case 1: var version = cat.versions.add(request.version); break;
											case 2: var version = cat.versions.update(request.version); break;
										};
										writeWindow.close();
										cat.versions.cache[version.vid] = save;
										cat.versions.setdate(version);
										cat.versions.setActive(version.vid);
										cat.s.menu.updateFooter();
										if(!o.silent) s.window.msg.show('.::.', 'Версия "'+version.name+'" каталога "'+cat.name+'" сохранена');
									} else if(request.err == 1) {
										if(request.msg != undefined) s.window.msg.show('.::.', request.msg);
										else s.window.msg.show('.::.', 'Внутреняя ошибка');
									};
								};
							}
						}
					});
				} else {
					s.ajax({
						url: '?catalog&versions&save',
						data: data,
						silent: true,
						success:{
							onJSON: function(request) {
								o.onJSON(request);
								if(request.err != undefined) {
									if(request.err == 0) {
										switch(o.type) {
											case 3: 
												var version = cat.versions.add(request.version);
											break;
											case 4:
												var version = cat.versions.update(request.version);	
												cat.versions.autosave.list.push(cat.versions.autosave.list.shift());
											break;
										}; 
										cat.versions.cache[version.vid] = save;
										cat.versions.setdate(version);
									} else if(request.err == 1) { 
									
									};
								};
							}
						}
					});
				};
				return name;
			},
			countWrite: function(){
				var count = 0;
				for(var key in this.list) if(this.list[key].autosave == 0) count++;
				return count;
			},
			countRead: function(){
				var count = 0;
				for(var key in this.list) count++;
				return count;
			},
			read: function(e) {
				var version = $(e).data().version
				var cache = this.cache[version.vid];
				this.autosave.stop();
				if(cache != undefined) {
					$('#wait').show();
					$(document).oneTime(500, 'wait', function(){
						$('#wait').hide();
						if(version.autosave == 0) cat.versions.setActive(version.vid);
					});
					var clone = dataClone(cache.s);
					cat.s.load(clone);
					cat.versions.autosave.stop();
					cat.init().redraw();
					cat.versions.autosave.start();
					if(version.autosave == 0) cat.versions.setActive(version.vid);
					cat.s.menu.updateFooter();
				} else {
					s.ajax({
						url: '?catalog&versions&load',
						data: 'h='+cat.h+'&cid='+cat.cid+'&vid='+version.vid,
						success:{
							onJSON: function(request) {
								if(request.data != undefined) {
									cat.versions.cache[version.vid] = request.data;
									var clone = dataClone(request.data.s);
									cat.s.load(clone);
									cat.versions.autosave.stop();	
									cat.init().redraw();
									cat.versions.autosave.start();
									if(version.autosave == 0) cat.versions.setActive(version.vid);
									cat.s.menu.updateFooter();
								} else alert('На сервере произошла ошибка');
							}
						}
					});
				};
				this.autosave.start();
			},
			remove: function(e){
				var data = $(e).data().version;
				
				s.ajax({
					url: '?catalog&versions&remove',
					data: 'h='+cat.h+'&cid='+cat.cid+'&vid='+data.vid,
					success:{
						onJSON: function(request) {
							if(request.err == 0) {
								s.window.msg.show('.::.',request.msg);
								
								if(data.readItem != undefined) data.readItem.remove();
								if(data.writeItem != undefined) data.writeItem.remove();
								delete cat.versions.list[data.vid];
								cat.versions.autosave.remove(data.vid);
								if(cat.versions.countWrite() == 0) {
									$('#a-1-save .a-1-sublist, #a-1-save-current').remove();
								};
								if(cat.versions.countRead() == 0) {
									$('#a-1-load .a-1-list-wp').append('<li id = "a-1-list-item-empty"><span>Нет записей</span></li>');
								};
							} else if(request.err == 1) {
								s.window.msg.show('.::.', request.msg);
							};
						}
					}
				});
			},
			add: function(value){
				if(value.autosave == 0) {
					if(this.countWrite() == 0) {
						var writeListWp = $('#a-1-save .a-1-list-wp');
						var writeCurrentListItem = $('<li class = "a-1-list-item" id = "a-1-save-current"><span>Как текущую запись</span></li>').appendTo(writeListWp);
						var writeSubList = $('<li class = "a-1-sublist"><span class = "a-1-list-article">Как существующую:</span></li>').appendTo(writeListWp);
						var writeSubListWp = $('<ul class = "a-1-sublist-wp"></ul>').appendTo(writeSubList);
						var writeItem = $('<li class = "a-1-list-item"><span class = "a-1-list-item-span">'+value.name+'</span></li>').data('version',value);
					} else {
						var writeSubListWp = $('#a-1-save .a-1-sublist-wp');
						var writeItem = $('<li class = "a-1-list-item"><span class = "a-1-list-item-span">'+value.name+'</span></li>').data('version',value);
					};
					value.writeItem = writeItem.on({mouseover:function(){$(this).simpleTooltipShow(cat.versions.htt);},mouseout:function(){$(this).simpleTooltipHide(cat.versions.htt);}});
					writeItem.prependTo(writeSubListWp);
				} else {
					this.autosave.add(value);
					//this.rename(value, 'Авто ['+value.name+']');
				};
				if(this.countRead() == 0) {
					$('#a-1-list-item-empty').remove();
					var readListWp = $('#a-1-load .a-1-list-wp');
					var readItem = $('<li class = "a-1-list-item"><span class = "a-1-list-item-span">'+value.name+'</span></li>').data('version',value);
				} else {
					var readListWp = $('#a-1-load .a-1-list-wp');
					var readItem = $('<li class = "a-1-list-item"><span class = "a-1-list-item-span">'+value.name+'</span></li>').data('version',value);
				};
				value.readItem = readItem.on({mouseover:function(){$(this).simpleTooltipShow(cat.versions.htt);},mouseout:function(){$(this).simpleTooltipHide(cat.versions.htt);}});
				readItem.prependTo(readListWp);
	
				this.list[value.vid] = value;
				
				if(value.vid == cat.vid) this.setActive(value.vid);
				this.setdate(value);
				return this.list[value.vid];
			},
			current: function(){
				return this.list[cat.vid];
			},
			rename: function(version, newname){
				version.name = newname;
				if(version.readItem != undefined) version.readItem.find('.a-1-list-item-span').text(newname);
				if(version.writeItem != undefined) version.writeItem.find('.a-1-list-item-span').text(newname);
			},
			get: function(vid){
				return this.list[vid];
			},
			setActive: function(vid){
				cat.vid = vid;
				var current = this.get(vid);
				if(current.autosave == 0) {
					$('.a-1-list-item.active').removeClass('active');
					current.readItem.addClass('active');
					current.writeItem.addClass('active');
				};
			},
			getActive: function(){
				return cat.vid == undefined ? undefined : this.get(cat.vid);
			},
			update: function(value){
				var version = this.list[value.vid];
			
				version.readItem.prependTo('#a-1-load .a-1-list-wp');
				if(version.autosave == 0) version.writeItem.prependTo('#a-1-save .a-1-sublist-wp');
				version.lastupdate = value.lastupdate;
				version.cid = value.cid;
				version.vid = value.vid;
				version.name = value.name;
				version.autosave = value.autosave;
				
				version.readItem.find('.a-1-list-item-span').text(value.name);
				if(version.writeItem != undefined) version.writeItem.find('.a-1-list-item-span').text(value.name);
				
				return version;
			},
			setdate: function(value){
				var nowDate = new Date();
				var saveDate = new Date(value.lastupdate*1000);
				var time = (saveDate.getDate() == nowDate.getDate() && saveDate.getFullYear() == nowDate.getFullYear() && saveDate.getMonth() == nowDate.getMonth()) ? ('Сегодня, '+saveDate.getHours()+':'+saveDate.getMinutes()) : (saveDate.getDate()+'.'+saveDate.getMonth()+'.'+saveDate.getFullYear()+', '+saveDate.getHours()+':'+saveDate.getMinutes());
			
				if(value.readItem != undefined) value.readItem.attr('tt', time);
				if(value.writeItem != undefined) value.writeItem.attr('tt', time);
			},
			load: function(data){
				this.preload();
				data.sort(function(h1, h2){return h1.lastupdate < h2.lastupdate ? -1 : h1.lastupdate > h2.lastupdate ? 1 : 0;})
				for(var key in data) this.add(data[key]);
			},
			preload: function(data){
				for(var key in this.list) delete this.list[key];
			}
		},
		imgs: {
			list: {},
			load: function(data){
				data = (data == undefined) ? {} : data;
				
				for(var key in data) this.add(data[key]);
			},
			get: function(iid){
				return this.list[iid];
			},
			add: function(value){
				value.parents = {};
			
				return this.list[value.iid] = value;
			},
			remove: function(iid){
				delete this.list[iid];
			},
			count: function(){
				var i=0;
				for(var key in this.list) i++;
				return i;
			},
			size: function(){
				var size=0;
				for(var key in this.list) size = size + this.list[key].size;
				size = Math.round(size * 100) / 100;
				return size;
			},
			getAll: function(){
				return this.list;
			},
			clear: function(){
				for(var key in this.list) this.list[key].parents = {};
			}
		},
		s: {
			length: 5,
			bind: function(){
				this.menu.bind();
				this[0].bind();
				this[1].bind();
				this[2].bind();
				this[3].bind();
				this[4].bind();
			},
			save: function(){
				return {
					//v: cat.v,
					ready: this.ready,
					current: this.current,
					0:this[0].save(),
					1:this[1].save(),
					2:this[2].save(),
					3:this[3].save(),
					4:this[4].save()
				};
			},
			load: function(data) {
				data = (data == undefined) ? {} : data;
				this.ready = (data.ready == undefined) ? 0 : parseInt(data.ready);
				this.current = (data.current == undefined) ? 0 : parseInt(data.current);
				
				this.menu.load();
				this[0].load(data[0]);
				this[1].load(data[1]);
				this[2].load(data[2]);
				this[3].load(data[3]);
				this[4].load(data[4]);
				this.menu.updateFooter();
			},
			init: function() {
				this[this.current].init();
				this.menu.init();
			},
			redraw: function(){
				this[this.current].redraw();
				this.menu.redraw();
			},
			check: function() {
				cat.s[cat.s.current].check();
				cat.s.menu.redraw();
			},
			next: function() {
				for(var i=0; i < cat.s.length; i++) {
					if(!cat.s[i].ready) return i;
				};
				return i;
			},
			menu: {
				bind: function(){				
					$('#a-1-save .a-1-sublist .a-1-list-item, #a-1-load .a-1-list-item').simpleDnd({
						map: [
							{document:'#a-0-wp',target:'.a-0-wp-icon'}
						],
						liveMode: true,
						opacity: .8,
						afterStart: function(){
							cat.s[2].panels.actions.open();
						},
						onObjectDrop: function(event){
							var currentTarget = event.simpleDnd.currentTarget;
							var originalObject = event.simpleDnd.originalObject;
							
							var version = $(originalObject).data().version;
							if(currentTarget != undefined) {
								switch($(currentTarget).prop('id')) {
									case 'a-0-wp-trash': 
										 if(confirm('Вы собираетесь безвозвратно удалить версию "' + version.name + '" каталога "' + cat.name + '", подтвердить?')) cat.versions.remove(originalObject);
									break;
								};
							};
							cat.s[2].panels.actions.close();
						},
						onTargetOver: function(event){
							$(this).addClass('hover');
						},
						onTargetOut: function(event){
							$(this).removeClass('hover');
						}
					});		
					$('.a-1-tab').live('click', function(){
						cat.s.go.to(parseInt(this.id.replace('a-1-tab', '')));
						return false;
					});
					
					$('#a-1-exit').click(function(){
						//if(confirm('Закрыв редактор котолога, не сохраненные данные будут утеряны, продолжить?')) 
						cat.exit();
					});
					
					$('#a-1-info').click(function(){
						s.window.open('a-3');
					});
				},
				load: function(){

				},
				init: function() {

				},
				redraw: function(){
					var next = cat.s.next();
					$('.a-1-tab').removeClass('locked active').each(function(index){
						if (index == parseInt(cat.s.current)) $(this).addClass('active');
						if (index > parseInt(next)) $(this).addClass('locked');
					});
				},
				build: function(){

				}, 
				updateFooter: function(){
					if(cat.vid != undefined) {
						var name = cat.versions.getActive() == undefined ? '' : cat.versions.getActive().name;
						$('#a-1-catname').html(cat.name+', версия '+name);
					}
				}
			},
			go: {
				to: function(step) {
					next = cat.s.next();
					
					if(step <= next) {
						cat.versions.autosave.stop();
						$('#wait').show();
						cat.s.current = step;
						cat.init().redraw();
						$('#wait').hide();
						cat.versions.autosave.start();
					}
					else cat.s.error();
				},
				next: function(){
					next = cat.s.next();

					if((cat.s.current == cat.s.ready) && (next > cat.s.ready)) cat.s.ready++;
					this.to(parseInt(cat.s.current) + 1);
				}
			},
			error: function() {
				next = cat.s.next();
				cat.s[next].error();
			},
			0: {
				bind: function(){
					this.design.bind();
				},
				save: function() {
					return {
						ready: this.ready == undefined ? true : this.ready,
						design: this.design.save()
					}
				},
				load: function(data) {
					data = data || {};
					this.ready = data.ready == undefined ? true : data.ready;
					
					this.design.load(data.design);
				},
				init: function() {
					this.design.init();
				},
				redraw: function(){
					this.design.redraw();
				},
				check: function() {
					var ready = true;
					if(this.design.current == null) ready = false;
					if(ready) {
						$('#a-2-1-next').removeClass('disabled');
						this.ready = true;
					}
					else {
						$('#a-2-1-next').addClass('disabled');
						this.ready = false;
					};
				},
				error: function() {
					s.window.msg.show('.::.', $('#a-2-1-err').html());
				},
				design: {
					length: 0,
					bind: function(){
						$('.a-2-1-1-design').remove();
						for(var i=0; i<this.length;i++) {
							var val = this[i];
							var e = $('<div class = "a-2-1-1-design" id = "a-2-1-1-'+val.index+'"></div>');
							var eWp = $('<div class = "a-2-1-1-design-wp shadow10"></div>');
							var view = $('<div class = "a-2-1-1-design-view"></div>').click(function(){cat.s[0].design.view.open($(this).parents('.a-2-1-1-design'));});
							var check = $('<div class = "a-2-1-1-design-check"></div>').click(function(){cat.s[0].design.check($(this).parents('.a-2-1-1-design'));});
							eWp.css({backgroundImage: 'url(/'+ this.path.root + val.name + this.path.postfix.s0.thumb +')'}).append(view).append(check)
							e.append(eWp).appendTo('#a-2-1-1').data('design', val);;
						};
					
						this.view.bind();
					},
					get: function(pageH){
						var getFontSize = function(pageH, lineH) {
							return Math.round(0.80 * pageH * lineH / 100 * 10) / 10;
						};		
						var getLineHeight = function(pageH, lineH) {
							return Math.round(0.90 * pageH * lineH / 100 * 10) / 10;
						};	
						var design = this.current.data().design;

						for(var key in design.css.front) {
							var val = design.css.front[key];
							val.lineHeight = getLineHeight(pageH, parseFloat(val.height)) + 'px'; 
							val.fontSize = getFontSize(pageH, parseFloat(val.height)) + 'px';  
						};
						for(var key in design.css.back) {
							var val = design.css.back[key];
							val.lineHeight = getLineHeight(pageH, parseFloat(val.height)) + 'px'; 
							val.fontSize = getFontSize(pageH, parseFloat(val.height)) + 'px';  
						};
						for(var key in design.css.left) {
							var val = design.css.left[key];
							val.lineHeight = getLineHeight(pageH, parseFloat(val.height)) + 'px'; 
							val.fontSize = getFontSize(pageH, parseFloat(val.height)) + 'px';  
						};
						for(var key in design.css.right) {
							var val = design.css.right[key];
							val.lineHeight = getLineHeight(pageH, parseFloat(val.height)) + 'px'; 
							val.fontSize = getFontSize(pageH, parseFloat(val.height)) + 'px';  
						};
						return design;
					},
					save: function() {
						data = {
							view: this.view.save(),
							current: (this.current != undefined) ? this.current.data().design.index : -1
						};
							
						return data;
					},
					load: function(data){
						delete this.current;
						data = (data == undefined) ? {} : data;
						
						if(data.current != -1 && $('#a-2-1-1-'+data.current).length > 0) this.current = $('#a-2-1-1-'+data.current);
						this.view.load(data.view);
					},
					init: function() {
						if(this.current == undefined) this.current = $('#a-2-1-1-0');
					},
					redraw: function(){
						$('.a-2-1-1-design.checked').removeClass('checked');
						if(this.current != undefined) $(this.current).addClass('checked');
						this.view.redraw();
					},
					addNew: function(){},
					check: function(e) {
						cat.autosave();
						this.current = e;
						this.redraw();
						cat.s.check();
					},
					uncheck: function() {
						cat.autosave();
						delete this.current;
						this.redraw();
						cat.s.check();
					},
					toggle: function(e) {
						if(this.current == undefined)
							this.check(e);
						else if($(this.current).data().design.index == $(e).data().design.index)
							this.uncheck();
						else this.check(e);
					},
					view: {
						bind: function(){
							$('#a-2-1-4').click(function(){cat.s[0].design.view.close();});
							$('#a-2-1-4-3-2').click(function(){cat.s[0].design.view.check();});
							$('#a-2-1-4-1-1').click(function(){cat.s[0].design.view.prev();});
							$('#a-2-1-4-1-3').click(function(){cat.s[0].design.view.next();});
							$('#a-2-1-4-wp1').click(function(event){event.stopPropagation();});
							
							this.zoom.bind();
						},
						save: function() {
							return {};
						},
						load: function(data) {
							delete this.current;
							data = (data == undefined) ? {} : data;
							
							if(data.current != undefined && $('#a-2-1-1-'+data.current).length > 0) this.current = $('#a-2-1-1-'+data.current)[0];
							this.zoom.load(data.zoom);
						},
						init: function() {},
						redraw: function(){
							var path = cat.s[0].design.path;
							if(this.current == undefined) s.window.close('a-2-1-4');
							else {
								var design = $(this.current).data().design;
								$('#a-2-1-4-1-2').text(design.name);
								$('#a-2-1-4-2-1').css({backgroundImage: 'url(/'+ path.root + design.name + path.postfix.s0.preview.front +')'});
								$('#a-2-1-4-2-2').css({backgroundImage: 'url(/'+ path.root + design.name + path.postfix.s0.preview.left +')'});
								$('#a-2-1-4-2-3').css({backgroundImage: 'url(/'+ path.root + design.name + path.postfix.s0.preview.right +')'});
								$('#a-2-1-4-2-4').css({backgroundImage: 'url(/'+ path.root + design.name + path.postfix.s0.preview.back +')'});
								s.window.open('a-2-1-4');
							}
							this.zoom.redraw();
						},
						open: function(e) {
							this.current = e;
							this.redraw();
						},
						close: function() {
							delete this.current;
							this.redraw();
						},
						check: function() {
							cat.s[0].design.check(this.current);
							this.close();
						},
						prev: function() {
							var design = this.current.data().design;
							if(design.index > 0) {
								this.current = $('#a-2-1-1-'+cat.s[0].design[design.index-1].index);
								this.redraw();
							}
						},
						next: function() {
							var design = this.current.data().design;
							if(design.index < cat.s[0].design.length-1) {
								this.current = $('#a-2-1-1-'+cat.s[0].design[design.index+1].index);
								this.redraw();
							}
						},
						zoom: {
							bind: function(){
								$('.a-2-1-4-2-img').click(function(){cat.s[0].design.view.zoom.open(this);});
								$('#a-2-1-4-4-1').click(function(){cat.s[0].design.view.zoom.close();});
							},
							load: function(data) {
							
							},
							init: function() {
								
							},
							redraw: function(){
								if(this.current == undefined) {
									s.window.close('a-2-1-4-4');
									$('#a-2-1-4, #a-2-1-4-wp1').removeClass('fixed');
								} else {
									s.window.open('a-2-1-4-4');
									var e = this.current;
									var design = cat.s[0].design.view.current.data().design;
									var path = cat.s[0].design.path;
									switch($(e).attr('id')){
										case 'a-2-1-4-2-1': var full = path.postfix.s0.preview.zoom.front; break;
										case 'a-2-1-4-2-2': var full = path.postfix.s0.preview.zoom.left; break;
										case 'a-2-1-4-2-3': var full = path.postfix.s0.preview.zoom.right; break;
										case 'a-2-1-4-2-4': var full = path.postfix.s0.preview.zoom.back; break;
									};
									//height = ($('#a-2-1-4-wp1').height() > $('#a-2-1-4').height()) ? $('#a-2-1-4-wp1').height() : $('#a-2-1-4').height() - 40;
									//width =  $('.a-2-1-4-2-img').width() * height / 295;
									var height = $(document).height()-60;
									var width = height * 0.765;
									
									offset = $(e).offset();
									
									$('#a-2-1-4-4-1').css({
										height: $('.a-2-1-4-2-img').height() + 'px',
										width: $('.a-2-1-4-2-img').width() + 'px',
										top: offset.top + 'px',
										left: offset.left + 'px'
									});
									$('#a-2-1-4, #a-2-1-4-wp1').addClass('fixed');
									$('#a-2-1-4-4').show();
									$('#a-2-1-4-4-1').stop()
										.animate({
											height: height + 'px',
											top: '20px',
											width: width + 'px',
											left: ($('#a-2-1-4').width() - width) / 2 + 'px'
										}, 250 )
										.css({
											backgroundImage: 'url(/'+ path.root + design.name + full +')'
										});
								};
							},
							open: function(e) {
								this.current = e;
								this.redraw();
							},
							close: function() {
								delete this.current;
								this.redraw();
							}
						}
					},
				}
			},
			1: {
				bind: function(){
					this.s.bind();
				},
				save: function() {
					return {
						ready: this.ready == undefined ? true : this.ready,
						s: {
							0: this.s[0].save(),
							1: this.s[1].save()
						}
					};
				},
				load: function(data) {
					data = (data == undefined) ? {} : data;
					this.ready = data.ready == undefined ? true : data.ready;
					
					this.s.load(data.s);
				},
				init: function() {	
					this.s[0].init();
				},
				redraw: function(){
					this.s[0].redraw();
				},
				check: function() {
					var ready = true;
					if(this.s[0].grids.current == null) ready = false;
					if(ready) {
						$('#a-2-2-next').removeClass('disabled');
						this.ready = true;						
					}
					else {
						$('#a-2-2-next').addClass('disabled');
						this.ready = false;
					}
				},
				error: function() {s.window.msg.show('.::.', $('#a-2-2-err').html());},
				ready: false,
				result: null,
				s: {
					bind: function(){
						this[0].bind();
						this[1].bind();
					},
					load: function(data){
						data = (data == undefined) ? {} : data;
						
						this[0].load(data[0]);
						this[1].load(data[1]);
					},
					0: {
						bind: function(){
							$('.a-2-2-border-body-grid').bind({click: function() {
								cat.s[1].s[0].grids.check($(this).attr('index'));
							}});
							$('.a-2-2-2-1-field').bind({click: function() {
								cat.s[1].s[1].preview.update();
							}});
						},
						save: function(){
							return {
								grids: this.grids.save()
							}
						},
						load: function(data) {
							data = (data == undefined) ? {} : data;
						
							this.grids.load(data.grids);
						},
						init: function(){
							this.grids.init();
							
							var css = {};
							var fontFamily = $(cat.s[0].design.current).data().design.sa.css.fontFamily;
							var color = $(cat.s[0].design.current).data().design.sa.css.color;
							if(fontFamily != undefined) css.fontFamily = fontFamily;
							if(color != undefined) css.color = color;
							$('.a-2-2-2-2-preview').css(css);
						},
						redraw: function(){
							this.grids.redraw();
						},
						grids: {
							save: function() {
								return {
									current: (this.current != undefined) ? this.current : -1,
									0:{cell:this[0].cell.save()},
									1:{cell:this[1].cell.save()},
									2:{cell:this[2].cell.save()},
									3:{cell:this[3].cell.save()},
									4:{cell:this[4].cell.save()},
									5:{cell:this[5].cell.save()},
									6:{cell:this[6].cell.save()},
									7:{cell:this[7].cell.save()}
								};
							},
							load: function(data) {
								delete this.current;
								data = (data == undefined) ? {} : data;
								
								if(data.current != -1 && data.current != undefined) this.current = parseInt(data.current);
								else this.current = 0; 
								
								this[0].load(data[0]);
								this[1].load(data[1]);
								this[2].load(data[2]);
								this[3].load(data[3]);
								this[4].load(data[4]);
								this[5].load(data[5]);
								this[6].load(data[6]);
								this[7].load(data[7]);
							},
							init: function(){
								if(this.current != undefined) cat.s[1].s[1].init();
							},
							redraw: function(){
								$('.a-2-2-border-body-grid').removeClass('checked').children('.first').removeClass('checked');
								if(this.current != undefined) {
									var cell = $('.a-2-2-border-body-grid[index=' + this.current + ']').addClass('checked').children('.first').addClass('checked');
									$('#a-2-2-2').show();
									cat.s[1].s[1].redraw();
								} else $('#a-2-2-2').hide();
							},
							check: function(index){
								cat.autosave();
								this.current = parseInt(index); 
								cat.s[1].s[1].init(); 
								this.redraw();
								cat.s.check();
							},
							uncheck: function() {
								cat.autosave();
								delete this.current; 
								this.redraw();
								cat.s.check();
							},
							toggle: function(index){
								if(this.current != undefined && this.current == index) this.uncheck();
								else this.check(index);
							},
							0: {
								size: {h:2,w:2},
								load: function(data) {
									data = (data == undefined) ? {} : data;
									this.cell.load(data.cell);
								},
								cell: {
									style: null,
									w: '287px',
									h: '392px',
									e: {
										def: {0:true,1:true,2:true,3:true,4:true,5:true,6:false,7:false,8:false},
										disabled: {0:true,1:false,2:false,3:false,4:false,5:false,6:false,7:false,8:false},
									},
									save: function(data) {
										return {
											checked: this.e.checked
										};
									},
									load: function(data) {
										data = (data == undefined) ? {} : data;
										if(data.checked != undefined) this.e.checked = dataClone(data.checked);
										else this.e.checked = dataClone(this.e.def);
									},
									init: function() {
										c = this.e.checked;
										d = this.e.disabled;
										if(c[1]+c[2]+c[3]+c[4] > 2 && c[8]) this.style = 2;
										else this.style = 3;
										//this.e.disabled[0] = true;
									}
								}
							},
							1: {
								size: {h:4,w:2},
								load: function(data) {
									data = (data == undefined) ? {} : data;
									this.cell.load(data.cell);
								},
								cell: {
									style: null,
									w: '287px',
									h: '182px',
									e: {
										def: {0:true,1:true,2:true,3:true,4:true,5:false,6:true,7:false,8:false},
										disabled: {0:true,1:false,2:false,3:false,4:false,5:false,6:false,7:false,8:true}
									},
									save: function(data) {
										return {
											checked: this.e.checked
										};
									},
									load: function(data) {
										data = (data == undefined) ? {} : data;
										if(data.checked != undefined) this.e.checked = dataClone(data.checked);
										else this.e.checked = dataClone(this.e.def);
									},
									init: function() {
										c = this.e.checked;
										d = this.e.disabled;
										d[1]=d[2]=d[3]=d[4]=d[7]=false;
										if(c[5] || c[6]){
											if(c[0]+c[1]+c[2]+c[3]+c[4] > 3) d[7]=true;
											this.style = 1;
										} else {
											if(c[0]+c[1]+c[2]+c[3]+c[4] > 2) {d[0]=!c[0];d[1]=!c[1];d[2]=!c[2];d[3]=!c[3];d[4]=!c[4];};
											this.style = 1;
										}
										
									}
								}
							},
							2: {
								size: {h:4,w:3},
								load: function(data) {
									data = (data == undefined) ? {} : data;
									this.cell.load(data.cell);
								},
								cell: {
									style: null,
									w: '210px',
									h: '210px',
									e: {
										def: {0:true,1:true,2:true,3:false,4:false,5:true,6:false,7:false,8:false},
										disabled: {0:false,1:false,2:false,3:false,4:false,5:false,6:false,7:false,8:true}
									},
									save: function(data) {
										return {
											checked: this.e.checked
										};
									},
									load: function(data) {
										data = (data == undefined) ? {} : data;
										if(data.checked != undefined) this.e.checked = dataClone(data.checked);
										else this.e.checked = dataClone(this.e.def);
									},
									init: function() {
										c = this.e.checked;
										d = this.e.disabled;
										d[0]=d[1]=d[2]=d[3]=d[4]=d[7]=false;
										if(c[0]+c[1]+c[2]+c[3]+c[4] > 3) d[7]=true;
										if(c[5]) this.style = 3;
										else if(c[6]) {
											if(c[0]+c[1]+c[2]+c[3]+c[4] > 3) {d[0]=!c[0];d[1]=!c[1];d[2]=!c[2];d[3]=!c[3];d[4]=!c[4];};
											this.style = 2;
										}
										else {
											if(c[0]+c[1]+c[2]+c[3]+c[4] > 1) {d[0]=!c[0];d[1]=!c[1];d[2]=!c[2];d[3]=!c[3];d[4]=!c[4];};
											this.style = 2;
										};
									}
								}
							},
							3: {
								size: {h:4,w:4},
								load: function(data) {
									data = (data == undefined) ? {} : data;
									this.cell.load(data.cell);
								},
								cell: {
									style: null,
									w: '126px',
									h: '182px',
									e: {
										def: {0:true,1:true,2:true,3:false,4:false,5:true,6:false,7:false,8:false},
										disabled: {0:false,1:false,2:false,3:false,4:false,5:false,6:false,7:false,8:true}
									},
									save: function(data) {
										return {
											checked: this.e.checked
										};
									},
									load: function(data) {
										data = (data == undefined) ? {} : data;
										if(data.checked != undefined) this.e.checked = dataClone(data.checked);
										else this.e.checked = dataClone(this.e.def);
									},
									init: function() {
										c = this.e.checked;
										d = this.e.disabled;
										d[0]=d[1]=d[2]=d[3]=d[4]=d[6]=d[7]=false;
										if(c[0]+c[1]+c[2]+c[3]+c[4] > 3) {d[6]=d[7]=true;}
										else if(c[0]+c[1]+c[2]+c[3]+c[4] > 1) {d[7]=true;};
										
										if(c[5]) this.style = 3;
										else if(c[6]) { 
											if(c[0]+c[1]+c[2]+c[3]+c[4] > 2) {d[0]=!c[0];d[1]=!c[1];d[2]=!c[2];d[3]=!c[3];d[4]=!c[4];};
											this.style = 3;
										} else {
											if(c[0]+c[1]+c[2]+c[3]+c[4] > 0) {d[0]=!c[0];d[1]=!c[1];d[2]=!c[2];d[3]=!c[3];d[4]=!c[4];};
											this.style = 3;
										}
									}
								}
							},
							4: {
								size: {h:5,w:4},
								load: function(data) {
									data = (data == undefined) ? {} : data;
									this.cell.load(data.cell);
								},
								cell: {
									style: null,
									w: '126px',
									h: '140px',
									e: {
										def: {0:true,1:false,2:false,3:false,4:false,5:true,6:false,7:false,8:false},
										disabled: {0:false,1:false,2:false,3:false,4:false,5:false,6:false,7:true,8:true}
									},
									save: function(data) {
										return {
											checked: this.e.checked
										};
									},
									load: function(data) {
										data = (data == undefined) ? {} : data;
										if(data.checked != undefined) this.e.checked = dataClone(data.checked);
										else this.e.checked = dataClone(this.e.def);
									},
									init: function() {
										c = this.e.checked;
										d = this.e.disabled;
										d[0]=d[1]=d[2]=d[3]=d[4]=d[6]=false;
										if(c[0]+c[1]+c[2]+c[3]+c[4] > 1) {d[6]=true;}
										
										if(c[5]) this.style = 3;
										else if(c[6]) { 
											if(c[0]+c[1]+c[2]+c[3]+c[4] > 0) {d[0]=!c[0];d[1]=!c[1];d[2]=!c[2];d[3]=!c[3];d[4]=!c[4];};
											this.style = 3;
										};
									}
								}
							},
							5: {
								size: {h:6,w:4},
								load: function(data) {
									data = (data == undefined) ? {} : data;
									this.cell.load(data.cell);
								},
								cell: {
									style: null,
									w: '126px',
									h: '112px',
									e: {
										def: {0:true,1:false,2:false,3:false,4:false,5:true,6:false,7:false,8:false},
										disabled: {0:false,1:false,2:false,3:false,4:false,5:false,6:true,7:true,8:true}
									},
									save: function(data) {
										return {
											checked: this.e.checked
										};
									},
									load: function(data) {
										data = (data == undefined) ? {} : data;
										if(data.checked != undefined) this.e.checked = dataClone(data.checked);
										else this.e.checked = dataClone(this.e.def);
									},
									init: function() {
										c = this.e.checked;
										d = this.e.disabled;
										d[0]=d[1]=d[2]=d[3]=d[4]=false;
										if(c[0]+c[1]+c[2]+c[3]+c[4] > 2) {d[0]=!c[0];d[1]=!c[1];d[2]=!c[2];d[3]=!c[3];d[4]=!c[4];};
										this.style = 3;
									}
								}
							},
							6: {
								size: {h:7,w:4},
								load: function(data) {
									data = (data == undefined) ? {} : data;
									this.cell.load(data.cell);
								},
								cell: {
									style: null,
									w: '126px',
									h: '91px',
									e: {
										def: {0:true,1:false,2:false,3:false,4:false,5:true,6:false,7:false,8:false},
										disabled: {0:false,1:false,2:false,3:false,4:false,5:false,6:true,7:true,8:true}
									},
									save: function(data) {
										return {
											checked: this.e.checked
										};
									},
									load: function(data) {
										data = (data == undefined) ? {} : data;
										if(data.checked != undefined) this.e.checked = dataClone(data.checked);
										else this.e.checked = dataClone(this.e.def);
									},
									init: function() {
										c = this.e.checked;
										d = this.e.disabled;
										d[0]=d[1]=d[2]=d[3]=d[4]=false;
										if(c[0]+c[1]+c[2]+c[3]+c[4] > 0) {d[0]=!c[0];d[1]=!c[1];d[2]=!c[2];d[3]=!c[3];d[4]=!c[4];};
										this.style = 3;
									}
								}
							},
							7: {
								size: {h:8,w:4},
								load: function(data) {
									data = (data == undefined) ? {} : data;
									this.cell.load(data.cell);
								},
								cell: {
									style: null,
									w: '126px',
									h: '77px',
									e: {
										def: {0:true,1:false,2:false,3:false,4:false,5:true,6:false,7:false,8:false},
										disabled: {0:false,1:false,2:false,3:false,4:false,5:false,6:true,7:true,8:true}
									},
									save: function(data) {
										return {
											checked: this.e.checked
										};
									},
									load: function(data) {
										data = (data == undefined) ? {} : data;
										if(data.checked != undefined) this.e.checked = dataClone(data.checked);
										else this.e.checked = dataClone(this.e.def);
									},
									init: function() {
										c = this.e.checked;
										d = this.e.disabled;
										d[0]=d[1]=d[2]=d[3]=d[4]=false;
										if(c[0]+c[1]+c[2]+c[3]+c[4] > 0) {d[0]=!c[0];d[1]=!c[1];d[2]=!c[2];d[3]=!c[3];d[4]=!c[4];};
										this.style = 3;
									}
								}
							}
						}
					},
					1: {
						bind: function(){
							this.preview.bind();
						},
						save: function(){
							return {
								preview: this.preview.save()
							}
						},
						load: function(data) {
							var data = (data == undefined) ? {} : data;
							
							this.preview.load(data.preview);
						},
						init: function(){
							this.preview.init();
						},
						redraw: function(){
							this.preview.redraw();
						},
						preview: {
							bind: function(){
								
							},
							save: function(){
								return {}
							},
							load: function(data) {
								var data = (data == undefined) ? {} : data;
							
								if(cat.s[1].s[0].grids.current != undefined) this.cell = cat.s[1].s[0].grids[cat.s[1].s[0].grids.current].cell;
							},
							init: function() {
								this.cell = cat.s[1].s[0].grids[cat.s[1].s[0].grids.current].cell;
								this.cell.init();
							},
							redraw: function() {
								if(cat.s[1].s[0].grids.current != undefined) {
									cell = this.cell;
								
									$('.a-2-2-2-1-1-box').each(function(index){
										if(cell.e.checked[index]) $(this).attr('checked','checked');
										else $(this).removeAttr('checked');
										if(cell.e.disabled[index]) $(this).attr('disabled','disabled').parent('.a-2-2-2-1-field').addClass('disabled');
										else $(this).removeAttr('disabled').parent('.a-2-2-2-1-field').removeClass('disabled');
									});
									$('.a-2-2-2-1-2-radio').each(function(index){
										index = index + 5;
										if(cell.e.checked[index]) $(this).attr('checked','checked');
										if(cell.e.disabled[index]) $(this).attr('disabled','disabled').parent('.a-2-2-2-1-field').addClass('disabled');
										else $(this).removeAttr('disabled').parent('.a-2-2-2-1-field').removeClass('disabled');
									});

									$('.a-2-2-2-2-preview').hide().removeClass('active');
									$('.a-2-2-2-2-preview-cell').hide().removeClass('active');
									for(var i=0; i < 5; i++) if(cell.e.checked[i]) $('.a-2-2-2-2-preview-cell[index=' + i + ']').show().addClass('active');
									for(var i=6; i < 9; i++) if(cell.e.checked[i]) $('.a-2-2-2-2-preview-cell[index=' + i + ']').show().addClass('active');
									this.buildCell();
								}
							},
							update: function() {
								cat.autosave();
								var cell = this.cell;
								$('.a-2-2-2-1-1-box, .a-2-2-2-1-2-radio').each(function(index){
									if($(this).attr('checked') == 'checked') cell.e.checked[index] = true;
									else cell.e.checked[index] = false;	
								});
								cell.init();
								this.redraw();
								cat.s.check();
							},
							buildCell: function(t) {
								switch(this.cell.style) {
									case 1: 
										var template = (t == undefined) ? $('.a-2-2-2-2-1') : t;
										template.show().addClass('active').height(this.cell.h).width(this.cell.w).find('.a-2-2-2-2-img-1').show().addClass('active');
										
										var w0 = parseInt(template.width());
										var h0 = parseInt(template.height());
										var w1 = w0 - Math.max(template.find('.a-2-2-2-2-name').width(), template.find('.a-2-2-2-2-prop').width());
										var h1 = h0 - template.find('.a-2-2-2-2-desc').height();
										$('.a-2-2-2-2-desc').width(w0);
										template.find('.a-2-2-2-2-img-1').height(h1).width(w1);
									break;
									case 2: 
										var template = (t == undefined) ? $('.a-2-2-2-2-2') : t;
										template.show().addClass('active').height(this.cell.h).width(this.cell.w).find('.a-2-2-2-2-img-1').show().addClass('active');
										
										var w0 = parseInt(template.width());
										var h0 = parseInt(template.height());
										var w1 = w0 - template.find('.a-2-2-2-2-prop').width();
										var h1 = h0 - template.find('.a-2-2-2-2-desc').height()-template.find('.a-2-2-2-2-name').height();
										$('.a-2-2-2-2-desc').width(w0);
										template.find('.a-2-2-2-2-img-1').height(h1).width(w1);
									break;
									case 3: 
										var template = (t == undefined) ? $('.a-2-2-2-2-3') : t;
										template.show().addClass('active').height(this.cell.h).width(this.cell.w).find('.a-2-2-2-2-img-1').show().addClass('active');
										
										var w0 = parseInt(template.width());
										var h0 = parseInt(template.height());
										var prop = template.find('.a-2-2-2-2-prop .a-2-2-2-2-preview-cell.active');
										var w2 = w0 / prop.length-10;
										var w2min = parseFloat(template.find('.a-2-2-2-2-prop .a-2-2-2-2-preview-cell').css('min-width').replace('px', '').replace('auto', '0'));
										if(w2 < w2min) w2 = w0 / 2 - 10;
										prop.width(w2);
										
										var w1 = w0;
										var h1 = h0 - template.find('.a-2-2-2-2-desc').height()-template.find('.a-2-2-2-2-name').height()-template.find('.a-2-2-2-2-prop').height();
										template.find('.a-2-2-2-2-img-1').height(h1).width(w1);
										
										var prop1 = template.find('.a-2-2-2-2-prop-1');
										var prop2 = template.find('.a-2-2-2-2-prop-2');
										var prop3 = template.find('.a-2-2-2-2-prop-3');
										var prop4 = template.find('.a-2-2-2-2-prop-4');
										//var ph = [prop1.height(),prop2.height(),prop3.height(),prop4.height()];
										//var h3 = Math.max.apply(Math, ph);
										h3 = 29;
										$('.a-2-2-2-2-desc').width(w0);
										prop1.height(h3);
										prop2.height(h3);
										prop3.height(h3);
										prop4.height(h3);
										//alert(h3);
									break;
								};
							},
							getGrid: function(options){
								var pr = this;
								var options = typeof options == 'object' ? options : {};
								var originalWidth = 700;
								var o = {
									width: (typeof options.width == 'number') ? options.width : originalWidth,
									prefix: (typeof options.prefix == 'string') ? options.prefix : 'a-2-3-1-'
								};

								var width = o.width;
								var rate = width / originalWidth;
								this.cell.init();
								var cl1 = {0:'.a-2-2-2-2-name-1',1:'.a-2-2-2-2-prop-1',2:'.a-2-2-2-2-prop-2',3:'.a-2-2-2-2-prop-3',4:'.a-2-2-2-2-prop-4',6:'.a-2-2-2-2-desc-1',7:'.a-2-2-2-2-desc-2',8:'.a-2-2-2-2-desc-3'};
								var preview = $('.a-2-2-2-2-'+this.cell.style).clone().removeAttr('id').appendTo('#a-tmp');

								preview.find('.a-2-2-2-2-preview-cell').hide().removeClass('active').filter('.a-2-2-2-2-img-1').show().addClass('active');
								for(var i=0; i<5; i++) if(this.cell.e.checked[i]) preview.find(cl1[i]).show().addClass('active');
								for(var i=6; i<9; i++) if(this.cell.e.checked[i]) preview.find(cl1[i]).show().addClass('active');
								
								this.buildCell(preview);
								
								var wp = $('<div></div>').append('<div class = "cell"></div>');
								cell = wp.find('.cell').css({
									width: preview.width() * rate +'px',
									height: preview.height() * rate +'px',
									position: 'relative'
								}).removeClass('cell').addClass(o.prefix + 'cell');
								var cl2 = {0:o.prefix + 'cell-name',1:o.prefix + 'cell-code',2:o.prefix + 'cell-price',3:o.prefix + 'cell-exist',4:o.prefix + 'cell-sprice',6:o.prefix + 'cell-desc',7:o.prefix + 'cell-desc',8:o.prefix + 'cell-desc',9:o.prefix + 'cell-img'};
								
								preview.find('.a-2-2-2-2-preview-cell.active').each(function(index){
									var e = $('<div class = "' + cl2[$(this).attr('index')] + ' ' + o.prefix + 'cell-e style-'+pr.cell.style+'"></div>')
									.css({
										width: $(this).width() * rate +'px',
										height: $(this).height() * rate +'px',
										position: 'absolute',
										top: ($(this).position().top + parseFloat($(this).css('margin-top').replace('px', '').replace('auto', '0'))) * rate +'px',
										left: ($(this).position().left + parseFloat($(this).css('margin-left').replace('px', '').replace('auto', '0'))) * rate +'px',
										textAlign: $(this).css('text-align'),
										paddingTop: parseFloat($(this).css('padding-top')) * rate +'px',
										paddingRight: parseFloat($(this).css('padding-right')) * rate +'px',
										paddingBottom: parseFloat($(this).css('padding-bottom')) * rate +'px',
										paddingLeft: parseFloat($(this).css('padding-left')) * rate +'px',
										fontWeight: $(this).css('font-weight'),
										fontSize: parseFloat($(this).css('font-size')) * rate +'px'
										//fontFamily: $(this).css('font-family'),
										//color: $(this).css('color')
									});
									
									
									e.appendTo(cell); 
								});
								grid = {
									cell: wp.html(),
									size: cat.s[1].s[0].grids[cat.s[1].s[0].grids.current].size
								};

								preview.remove();
								return grid;
								
							}
						}
					}
				}
			},
			2: {
				bind: function(){
					this.panels.bind();
					this.pages.bind();
					this.slots.bind();
				},
				save: function(){
					return {
						ready: this.ready == undefined ? true : this.ready,
						slots: this.slots.save()
					};
				},
				load: function(data) {
					data = (data == undefined) ? {} : data;
					this.ready = data.ready == undefined ? true : data.ready;
					
					this.panels.load(data.panels);
					this.pages.load(data.pages);
					this.slots.load(data.slots);
				},
				init: function() {
					this.pages.init();
					this.panels.init();
					this.slots.init();
					this.check();
				},
				redraw: function(){
					this.panels.redraw();
					this.pages.redraw();
					this.slots.redraw();
				},
				panels: {
					bind: function(){
						this.pages.bind();
						this.goods.bind();
						this.actions.bind();
					},
					load: function(data){
						data = (data == undefined) ? {} : data;
						
						this.pages.load(data.pages);
						this.goods.load(data.goods);
						this.actions.load(data.actions);
					},
					init: function() {
						this.parent = cat.s[2];
						
						this.pages.init();
						this.goods.init();
					},
					redraw: function(){
						this.pages.redraw();
						this.goods.redraw();
					},
					pages: {
						length: 0,
						opened: true,
						$:{},
						bind: function(){
							$('#a-2-3-2-jscroll, #a-2-3-4-jscroll').jScrollPane({animateScroll: true});
							$('#a-2-3-2-jscroll').on({
								click: function(event){
									if(!$(event.target).hasClass('a-2-3-2-page') && !$(event.target).hasClass('jspPane') && !$(event.target).hasClass('a-2-3-2-space') && $(event.target).prop('id') != 'a-2-3-2-newpage') cat.s[2].panels.pages.toggle();
								}
							});
							$('#a-2-3-2-newpage').click(function(){
								cat.s[2].panels.pages.newpage();
							});
							$('#a-2-3-2').on({
								click:function(){
									cat.s[2].panels.pages.toggle();
								}
							}, '#a-2-3-2-toggle');
							$('.a-2-3-2-page').simpleDnd({
								map: [
									{document:'#a-2-3-2-jscroll',target:'.a-2-3-2-space, .a-2-3-2-page'},
									{document:'#a-0-wp',target:'.a-0-wp-icon'}
								],
								//debug: true,
								liveMode: true,
								onTargetOver: function(event){
									var target = $(event.simpleDnd.currentTarget);
									var target = $(this);
									if(target.hasClass('a-2-3-2-space')) {
										var originalObject = $(event.simpleDnd.originalObject);
										var data = target.data().css;
										target.stop().animate({height:data.height+data.heightPlus+'px'}, 300);
									} else if(target.hasClass('a-2-3-2-page')) cat.s[2].panels.pages.go(target);
									else if(target.hasClass('a-0-wp-icon')) target.addClass('hover');
									
								},
								onTargetOut: function(event){
									var target = $(event.simpleDnd.currentTarget);
									var target = $(this);
									var data = target.data().css
									target.stop().animate({height:data.height+'px'});
									if(target.hasClass('a-0-wp-icon')) target.removeClass('hover');
								},
								afterStart: function(event){
									mouseInDrag = true;
									event.simpleDnd.object.addClass('hover');
									var originlaObject = event.simpleDnd.originalObject;
									
									event.simpleDnd.data().page = originlaObject.hide();
									event.simpleDnd.data().space = originlaObject.prev().hide();
									event.simpleDnd.map[0].target = event.simpleDnd.map[0].target.not(event.simpleDnd.data().page).not(event.simpleDnd.data().space);
									
									for(var i=0; i < event.simpleDnd.map.length;i++) {
										$(event.simpleDnd.map[i].target).each(function(){
											var height = parseInt($(this).css('height'));
											var heightPlus = $(event.simpleDnd.object).height()+height;
											$(this).data().css = {height:height,heightPlus:heightPlus};
										});
									};
									cat.s[2].panels.actions.open();
								},
								onObjectDrop: function(event){
									var target = $(event.simpleDnd.currentTarget);
									var object = $(event.simpleDnd.originalObject);
									var page = event.simpleDnd.data().page;
									var space = event.simpleDnd.data().space;
									var event = event;
									
									if(target.length > 0 != undefined) {
										if(target.hasClass('a-2-3-2-space')){
										var data = target.data().css;
										var leftFrom = event.pageX;
										var topFrom = event.pageY;
										var leftTo = event.simpleDnd.data().left;
										var topTo = event.simpleDnd.data().top + $(space).height();
															
										page
											.css({zIndex: 1000, fontFamily:page.css('fontFamily'),fontSize:page.css('fontSize'),color:page.css('color')})
											.clone()
											.appendTo('body')
											.show()
											.css({position:'absolute',top:topFrom,left:leftFrom})
											.animate({left:leftTo,top:topTo}, {
												duration:500,
												easing: 'easeOutBounce',
												complete: function(){
													target.css({height:data.height+'px'});
													space.show();
													page.show();
													$(this).remove();
													if(object.data().page.number < target.data().index) {
														cat.s[2].pages.move(object.data().page.number, target.data().index);
													} else if(object.data().page.number > target.data().index) {
														cat.s[2].pages.move(object.data().page.number, target.data().index+1);
													};
													//cat.s[2].panels.pages.go(target.next());
													mouseInDrag = false;
												}
											});
										} else if(target.hasClass('a-0-wp-icon')) {
											cat.s[2].pages.remove(object.data().page.number);
											page.show();
											space.show();
											mouseInDrag = false;
										} else {
											page.show();
											space.show();
											mouseInDrag = false;
										};
									};

									$('.a-0-wp-icon').removeClass('hover');
									cat.s[2].panels.actions.close();
								},
								onObjectDrag: function(event){},
								beforeStart: function(event){
									return !mouseInDrag;
								},
								beforeEnd: function(event){
									var target = $(event.simpleDnd.currentTarget);
									if(target.length > 0 != undefined && target.hasClass('a-2-3-2-space')) {
										event.simpleDnd.data().left = $(event.simpleDnd.originalObject).offset().left;
										event.simpleDnd.data().top = $(event.simpleDnd.currentTarget).offset().top;
									};
								}
							});
						},
						load: function(){

						},
						init: function() {
							this.length = 0;
							this.parent = cat.s[2].panels;
							
							this.$.main = $('#a-2-3-2');
							this.$.toggle = $('#a-2-3-2-toggle');
						},
						redraw: function() {
							$('.a-2-3-2-page, .a-2-3-2-space').remove();
							$('#a-2-3-2').disableSelection();
							$('#a-2-3-2-jscroll').data('jsp').reinitialise();
							
							if(this.opened) this.open();
						},
						add: function(page) {
							var index = this.length++;
						
							var firstSpace = $('<div class = "a-2-3-2-space"></div>');						
							var space = $('<div class = "a-2-3-2-space"></div>');
							var e = $('<div class = "a-2-3-2-page">'+(page.number)+'</div>').data('page', page).mousedown(function(){cat.s[2].panels.pages.go(this);});
							$('#a-2-3-2-newpage').before(e);
							if(this.length > 1) e.after($(space).data('index', $('.a-2-3-2-page').length));
							else e.before(firstSpace.data('index', 0)).after(space.data('index', 1)); 
							$('#a-2-3-2-jscroll').data('jsp').reinitialise();
							this[index] = {
								e: e,
								space: space
							};
						},
						removeLast: function(){
							for(var i=0; i < this.length; i++) {
								var k = this.length - 1 - i;
								if(this[k] != undefined) {
									this[k].e.remove();
									this[k].space.remove();
									delete this[k];
									return true;
								};
							};
							return false;
						},
						newpage: function() {
							cat.s[2].pages.add();
							this.go($('.a-2-3-2-page').eq($('.a-2-3-2-page').length-1));
							$('#a-2-3-2-jscroll').data('jsp').scrollToY(10000);
						},
						go: function(e){
							$('#a-wp1').stop().animate({scrollTop: $(e).data('page').scrollTop});
						},
						close: function() {
							this.$.main.stop().animate({left: -this.$.main.width()},{duration:300,easing: 'easeOutBounce'})
							this.$.toggle.removeClass('open').addClass('close');
							
							this.opened = false;
						},
						open: function() {
							this.$.main.stop().animate({left: 0},{duration:300,easing: 'easeOutBounce'});
							this.$.toggle.removeClass('close').addClass('open');
							
							this.opened = true;
						},
						toggle: function() {
							if(this.opened) this.close();
							else this.open();
						},
						sctollTo: function(e){
							$('#a-2-3-2-jscroll').data('jsp').scrollToY($(e).position().top);
						}
					},
					goods: {
						length: 0,
						opened: true,
						$: {},
						bind: function(){
							$('#a-2-3-4-jscroll').on({
								click: function(event){
									if(!$(event.target).hasClass('a-2-3-4-goods jspPane')) cat.s[2].panels.goods.toggle();
								}
							});
							$('#a-2-3-4-toggle').click(function(){
								cat.s[2].panels.goods.toggle();
							});
							$('.a-2-3-4-goods').simpleDnd({
								map: [
									{document:'#a-wp1',target:'.a-2-3-1-cell'},
									{document:'#a-2-3-2-jscroll jspContainer',target:'.a-2-3-2-page'},
									{document:'#a-0-wp',target:'.a-0-wp-icon'}
								],
								onTargetOver: function(event){
									$(this).addClass('hover');
									if($(event.simpleDnd.currentTarget).hasClass('a-2-3-2-page')) {
										cat.s[2].panels.pages.go($(event.simpleDnd.currentTarget));
									};
								},
								onTargetOut: function(event){
									$(this).removeClass('hover');
								},
								onObjectDrop: function(event){
									$('.dndSlot').removeClass('active hover');
									if(event.simpleDnd.currentTarget != undefined) {
										if($(event.simpleDnd.currentTarget).hasClass('a-0-wp-icon')) {
											switch($(event.simpleDnd.currentTarget).prop('id')) {
												case 'a-0-wp-trash': 
													var slot = event.simpleDnd.originalObject.data().goods.slot;
													cat.s[2].slots.goods.remove(slot.goods); 
													cat.s[2].slots.draw(slot);
												break;
											};
										} else {
											var from = event.simpleDnd.originalObject.data().goods.slot;
											var to = $(event.simpleDnd.currentTarget).data().slot;
											if(to != undefined) {
												cat.s[2].slots.move(from, to);
												cat.s[2].slots.draw(from);
												cat.s[2].slots.draw(to);
											};
										};
									};
									cat.s[2].panels.actions.close();
									mouseInDrag = false;
								},
								onMouseDown: function(event){
									
								},
								afterStart: function(event){
									$('.dndSlot').addClass('active');
									$('#a-2-3-6').hide();
									mouseInDrag = true;
									cat.s[2].panels.actions.open();
								}
							}).live({
								mouseover: function(event){
									var data = $(this).data();
									if(!mouseInDrag) {
										$(data.goods.slot.e).addClass('active');
										if(data.goods.data.img) {
											var width = 200;
											var height = 200;
											$('#a-2-3-6').css({
												top: ($(this).offset().top + height + 10 > $('#a-wp1').height()) ? $('#a-wp1').height() - height - 10 : $(this).offset().top,
												left: $(this).offset().left - width - 5,
												backgroundImage: 'url(/'+ data.goods.data.img.src +')'
											}).show();
										};
									};
								},
								mouseout: function(event){
									var data = $(this).data();
									if(!mouseInDrag) {
										$(data.goods.slot.e).removeClass('active');
										if(data.goods.data.img) {
											$('#a-2-3-6').hide();
										};
									}
								}
							});
							this.filter.bind();
						},
						load: function(){

						},
						init: function() {
							this.parent = cat.s[2].panels;
							
							this.$.main = $('#a-2-3-4');
							this.$.inner = $('#a-2-3-4-inner');
							this.$.toggle = $('#a-2-3-4-toggle');
							this.filter.init();
						},
						
						redraw: function() {
							this.clear();
						
							this.clipToScroll();
							$('#a-2-3-4-jscroll').data('jsp').reinitialise();
							
							if(this.opened) this.open();
						},
						clipToBody: function () {
							this.$.main.css('right', 0);
						},
						clipToScroll: function() {
							this.$.main.css('right', scrollbarWidth()+'px');
						},
						close: function() {
							this.$.inner.stop().animate({right: -this.$.inner.width()},{duration:300,easing: 'easeOutBounce'})
							this.$.toggle.removeClass('open').addClass('close');
							this.$.main.stop().animate({width: 8});
							this.opened = false;
						},
						open: function() {
							this.$.inner.stop().animate({right: 0},{duration:300,easing: 'easeOutBounce'});
							this.$.toggle.removeClass('close').addClass('open');
							this.$.main.stop().animate({width: 108});
							this.opened = true;
						},
						toggle: function() {
							if(this.opened) this.close();
							else this.open();
						},
						sctollTo: function(e){
							$('#a-2-3-4-jscroll').data('jsp').scrollToY($(e).position().top);
						},
						build: function(goods){
							if(goods.e == undefined) {
								var e = $('<div class = "a-2-3-4-goods"></div>').data('goods', goods).click(function(event){
									event.stopPropagation();
									var slot = $(this).data().goods.slot;
									if(slot.e != undefined) cat.s[2].slots.sctollTo($(slot.e).addClass('active'));
									else s.window.msg.show('.::.', 'Данный товар был добавлен в сетку большего размера, сейчас он отсутствует на страницах Вашего каталога. Для вывода, необходимо разместить его в ячейке');
								});
								$('#a-2-3-4 .jspPane').append(e);
								$('#a-2-3-4-jscroll').data('jsp').reinitialise();
								goods.e = e;
							};
							
							this.draw(goods);
							return e
						}, 
						draw: function(goods){
							if (goods.data != undefined && goods.data.img != undefined) {
								$(goods.e).css({backgroundImage:'url("'+goods.data.img.src+'")'});
							};
						},
						clear: function(){
							$('.a-2-3-4-goods').each(function(){
								delete $(this).data().goods.e;
							}).remove();
						},
						filter: {
							load: function(data){
							
							},
							bind: function(){
								var filter = this;
								$('#a-2-3-8-filter').on({
									change: function () {
										filter.run($(this).val());
									},
									keyup: function() {
										$(this).stopTime('filt').oneTime('5ds', 'filter', function (){
											filter.run($(this).val());
										});
									}
								}).ph();
								$('#a-2-3-8-filter-clear').on({
									click: function(){
										$('#a-2-3-8-filter').val('').blur();
										filter.clear();
									}
								});
							},
							init: function(){
								$('#a-2-3-8-filter-clear').hide().val('');
							},
							redraw: function(){
							
							},
							run: function(str){
								this.clear();
								if(str != '') {
									$('#a-2-3-8-filter-clear').show();
									var strList = str.split(/\s+/);
									var toHidden = $();
									for(var i=0; i< cat.s[2].slots.goods.length; i++) {
										var val = cat.s[2].slots.goods[i];
										if(val != undefined && val.data != undefined) {
											var hidden = true;
											var b = false;
											for(key in val.data) {
												for(var k=0; k<strList.length; k++) {
													var text = val.data[key];		
													var str = strList[k].toUpperCase();
													if(str != '') {
														if(typeof text == 'string' && text.toUpperCase().indexOf(str) + 1) {
															var hidden = false;
															b = true;
															break;
														};
													};
												};
												if(b) break;
											};
											if(hidden) toHidden = toHidden.add(val.e);
										};
									};
									toHidden.hide();
								} else $('#a-2-3-8-filter-clear').hide();
							},
							clear: function(){
								$('.a-2-3-4-goods').show();
							}
						}
					},
					actions: {
						bind: function(){
							var actions = this;
							this.close();
							$('#a-0').click(function(){
								actions.close();
							});
						},
						load: function(){
						},
						open: function(){
							$('#a-0').addClass('open');
							return this;
						},
						close: function(){
							$('#a-0').removeClass('open');
							$('#a-0').find('.a-0-wp-icon').removeClass('hover');
							return this;
						},
						copy: function(e) {},
						trash: function(e){}
					}
				},
				pages: {
					max: 20,
					length: 0,
					save: function() {},
					bind: function(){
						$('#a-2-3-20').click(function(){cat.s[2].pages.add()});
						
						$('.a-2-3-1-cell-textarea').live({
							mousedown: function(event){event.stopPropagation();}
						});
						$('.a-2-3-1-cell').simpleDnd({
							map: [
								{document:'#a-wp1',target:'.a-2-3-1-cell'},
								{document:'#a-2-3-2-jscroll jspContainer',target:'.a-2-3-2-page'},
								{document:'#a-0-wp',target:'.a-0-wp-icon'}
							],
							onTargetOver: function(event){
								$(this).addClass('hover');
								if($(event.simpleDnd.currentTarget).hasClass('a-2-3-2-page')) {
									cat.s[2].panels.pages.go($(event.simpleDnd.currentTarget));
								};
							},
							onTargetOut: function(event){
								$(this).removeClass('hover');
							},
							onObjectDrop: function(event){
								$('.dndSlot, .a-2-3-4-goods').removeClass('active hover');
								if(event.simpleDnd.currentTarget != undefined) {
									if($(event.simpleDnd.currentTarget).hasClass('a-0-wp-icon')) {
										switch($(event.simpleDnd.currentTarget).prop('id')) {
											case 'a-0-wp-trash': 
												var slot = event.simpleDnd.originalObject.data().slot;
												if(slot.goods != undefined) {
													cat.s[2].slots.goods.remove(slot.goods); 
													cat.s[2].slots.draw(slot);
												};
											break;
										};
									} else {
										var from = event.simpleDnd.originalObject.data().slot;
										var to = $(event.simpleDnd.currentTarget).data().slot;
										if(to != undefined) {
											cat.s[2].slots.move(from, to);
											cat.s[2].slots.draw(from);
											cat.s[2].slots.draw(to);
										};
									};
								};
								cat.s[2].panels.actions.close();
								mouseInDrag = false;
							},
							beforeStart: function(event){
								if($(event.target).hasClass('a-2-3-1-cell-textarea')) return false;
								else return true;
							},
							afterStart: function(event){
								mouseInDrag = true;
								cat.s[2].panels.actions.open();
								$('.a-2-3-1-cell').addClass('active');
								var originalTextarea = $(event.simpleDnd.originalObject).find('textarea');
								var cloneTextarea = $(event.simpleDnd.object).removeClass('a-2-3-1-cell').css({backgroundColor:'#ffffff'}).find('textarea');
								cloneTextarea.each(function(index){ $(this).val(originalTextarea.eq(index).val());});
							}
						}).live({
							mouseover: function(){
								if($(this).data().slot != undefined && $(this).data().slot.goods != undefined) {
									$($(this).data().slot.goods.e).addClass('hover');
									$(this).stopTime('moveto').oneTime('1s', 'moveto', function() {
										if($(this).data().slot != undefined) cat.s[2].panels.goods.sctollTo($(this).data().slot.goods.e);
									});
								};
							},
							mouseout: function(){
								if($(this).data().slot.goods != undefined) $($(this).data().slot.goods.e).removeClass('hover');
								$(this).stopTime('moveto');
							},
							click: function(){
								if($(this).data().slot.goods != undefined) cat.s[2].panels.goods.sctollTo($(this).data().slot.goods.e.addClass('active'));
							}
						});
						$('.a-2-3-1-cell-img').live({
							click: function(event){
								var pageX = event.pageX;
								var pageY = event.pageY;
								var offsetTop = $(this).offset().top;
								var offsetLeft = $(this).offset().left;
								var width = $(this).width();
								var height = $(this).height();
								if(pageX > offsetLeft && pageX < offsetLeft + width && pageY > offsetTop && pageY < offsetTop + height) cat.s[2].slots.goods.img.window.onOpen(this);
							}
						});
						$('.a-2-3-1-cell-e').live({
							click: function(event){
								event.stopPropagation();
								$(this).find('textarea').focus();
							}
						});
					},
					load: function(data) {
					
					},
					init: function() { 
						this.grid = cat.s[1].s[1].preview.getGrid({width: 800});
						for(var i=0; i< this.length; i++) delete this[i];
						this.length = 0;
					},
					realCount: function(grid){
						var grid = (grid == undefined) ? this.grid : grid;
						var lastGoods = 0;
						var realCount = 0;
						var size = grid.size.h * grid.size.w;
						
						for(var i=0; i<cat.s[2].slots.length;i++) {
							if(cat.s[2].slots[i] != undefined && cat.s[2].slots[i].goods != undefined) 
								lastGoods = i;
						}
						realCount = Math.ceil((lastGoods+1) / size);
						
						//for(var i=0, count = 0; (i<cat.s[2].slots.length) && (i<size * this.max); i++) if(cat.s[2].slots[i] != undefined && cat.s[2].slots[i].goods != undefined) count = i;
						//count = (count == 0) ? (1) : (Math.floor(count / (size))+1);
						//count = (count > this.max) ? (this.max) : (count);
						return realCount;
					},
					redraw: function() {
						var css = {};
						var fontFamily = $(cat.s[0].design.current).data().design.sa.css.fontFamily;
						var color = $(cat.s[0].design.current).data().design.sa.css.color;
						if(fontFamily != undefined) css.fontFamily = fontFamily;
						if(color != undefined) css.color = color;
						
						$('#a-2-3-1').empty().css(css);
						var count = this.realCount();
						count = (count == 0) ? (1) : (count);
						for(var i=0, page = true; (i < count) && page; i++) page = this.add(1);
					},

					add: function(silent) {
						var count = this.count();
						if(this.count() < this.max) {
							var index = this.length++;
							var number = count+1;
							if(this[index] == undefined) this[index] = {index:index,number:number};
							var page = this[index];
							var pageDiv = $('<div class = "a-2-3-1-page shadow"><div class = "a-2-3-1-page-number shadow">'+ (page.number) +'</div></div');
							var table = $('<table cellspacing = "0" cellpadding = "0" class = "a-2-3-1-page-table"></table>');
							//var thead = $('<thead><tr><td colspan = "'+this.grid.size.w+'" align= "right"></td></tr></thead>');
							var tbody = $('<tbody></tbody>');
							var currSlot = page.index * this.grid.size.h * this.grid.size.w;
							for(var i=0; i<this.grid.size.h; i++) {
								var tr = $('<tr></tr>');
								for(var k=0; k<this.grid.size.w; k++) {
									tr.append($('<td></td>').append(cat.s[2].slots.build(cat.s[2].slots.add(currSlot), this.grid.cell)));
									currSlot++;
								}
								tbody.append(tr);
							};
							//var tfoot = $('<tfoot><tr><td colspan = "'+this.grid.size.w+'"></td></tr></tfoot>');
							
							table = table.append(tbody);
							var e = pageDiv.append(table);
							
							e.find('.a-2-3-1-cell-name').each(function(index){
								var textarea = $('<textarea size = "100" ph = "Название" class = "a-2-3-1-cell-textarea" style = "width:'+$(this).width()+'px;"></textarea>').html('');
								$(this).append(textarea);
							}).change(function(){
								cat.s[2].slots.update(this, {name:$(this).find('.a-2-3-1-cell-textarea').val()});
							});
							e.find('.a-2-3-1-cell-code').each(function(index){
								var prefix = $('<span>Арт.: </span>').appendTo('#a-tmp');
								
								var width = ($(this).height() < prefix.height()) ? $(this).width() - prefix.width()-10 : $(this).width();
								var textarea = $('<textarea size = "100" ph = "________________________" class = "a-2-3-1-cell-textarea" style = "width:'+(width)+'px;"></textarea>').html('');
								$(this).append(prefix).append(textarea);
							}).change(function(){cat.s[2].slots.update(this, {code:$(this).find('.a-2-3-1-cell-textarea').val()});});
							e.find('.a-2-3-1-cell-price').each(function(index){
								var prefix = $('<span>Цена: </span>').appendTo('#a-tmp');
								
								var width = ($(this).height() <  prefix.height()) ? $(this).width() - prefix.width()-10 : $(this).width();
								var textarea = $('<textarea size = "100" ph = "________________________" class = "a-2-3-1-cell-textarea" style = "width:'+(width)+'px;"></textarea>').html('');
								$(this).append(prefix).append(textarea);
							}).change(function(){cat.s[2].slots.update(this, {price:$(this).find('.a-2-3-1-cell-textarea').val()});});
							
							e.find('.a-2-3-1-cell-exist').each(function(index){
								var select = $('<select class = "a-2-3-1-cell-select" style = "width:'+$(this).width()+'px;height:'+$(this).height()+'px"><option value = "" selected>Наличие</option><option value = "Есть">Есть</option><option value = "На складе">На складе</option></select>').appendTo(this);
								select.simpleSelect();
								
							}).change(function(){cat.s[2].slots.update(this, {exist:$(this).find('.a-2-3-1-cell-select').val()});});
							e.find('.a-2-3-1-cell-sprice').each(function(index){
								var prefix = $('<span>Опт цена: </span>').appendTo('#a-tmp');
								
								var width = ($(this).height() <  prefix.height()) ? $(this).width() - prefix.width()-10 : $(this).width();
								var textarea = $('<textarea size = "100" ph = "________________________" class = "a-2-3-1-cell-textarea" style = "width:'+width+'px;height:15px;"></textarea>').html('');
								$(this).append(prefix).append(textarea);;
							}).change(function(){cat.s[2].slots.update(this, {sprice:$(this).find('.a-2-3-1-cell-textarea').val()});});
							
							e.find('.a-2-3-1-cell-desc').each(function(index){
								var textarea = $('<textarea size = "500" ph = "Описание" class = "a-2-3-1-cell-textarea" style = "width:'+$(this).width()+'px;height:'+$(this).height()+'px"></textarea>').html('');
								$(this).append(textarea);
							}).change(function(){cat.s[2].slots.update(this, {desc:$(this).find('.a-2-3-1-cell-textarea').val()});});
							
							$('#a-2-3-1').append(e);
							var scrollTop = e.position().top + $('#a-2-3-1').offset().top + $('#a-wp1').scrollTop();
							
							e.find('[ph]').ph();
							page.e = e;
							page.scrollTop = scrollTop;
							page.number = number;
							page.e.data().page = page;
							cat.s[2].panels.pages.add(page);
							return page;
						} else if(silent != 1) {
							s.window.msg.show('.::.', 'Достигнуто максимальное количество страниц.');
							return false;
						}
					},
					move: function(from, to){
						var size = this.grid.size.w * this.grid.size.h;
						
						if(from < to) {
							//if(to > max) to = max;
							for(var i=from; i < to; i++) {
								var startFrom = (i-1) * size;
								var startTo = (i) * size;
								for(var k=0; k<size; k++) {
									var slotFrom = cat.s[2].slots[startFrom+k];
									var slotTo = cat.s[2].slots[startTo+k];
									cat.s[2].slots.move(slotFrom, slotTo);
								};
							};
						} else if(from > to){
							//if(to > max) to = max;
							for(var i=from; i > to; i--) {
								var startFrom = (i-1) * size;
								var startTo = (i-2) * size;
								for(var k=0; k<size; k++) {
									var slotFrom = cat.s[2].slots[startFrom+k];
									var slotTo = cat.s[2].slots[startTo+k];
									cat.s[2].slots.move(slotFrom, slotTo);
								};
							};
						}
					},
					remove: function(number){
						var size = this.grid.size.w * this.grid.size.h;
						var max = this.realCount();
					
						for(var i=number; i < max; i++) {
							var startFrom = (i-1) * size;
							var startTo = (i) * size;
							for(var k=0; k<size; k++) {
								var slotFrom = cat.s[2].slots[startFrom+k];
								var slotTo = cat.s[2].slots[startTo+k];
								cat.s[2].slots.move(slotFrom, slotTo);
							};
						};
						if(number <= max) {
							var startSlot = size*(max-1);
							var endSlot = size*(max);
							for(var i=startSlot; i < endSlot; i++) {
								cat.s[2].slots.goods.remove(cat.s[2].slots[i].goods);
							};
							cat.autosave();
							var removeIndex = max-1;
						} else var removeIndex = this.last();
						
						$('#a-2-3-2-jscroll').data('jsp').reinitialise();
						$('#a-2-3-4-jscroll').data('jsp').reinitialise();
						this[removeIndex].e.remove();
						delete this[removeIndex];
						cat.s[2].panels.pages.removeLast();
					},
					close: function() {
						$('#a-2-3-20').addClass('disabled');
					},
					open: function() {
						$('#a-2-3-20').removeClass('disabled');
					},
					error: function() {
						s.window.msg.show('.::.', $('#a-2-3-err2').html());
					},
					scrollTo: function(e) {
						$('#a-wp1').stop().animate({scrollTop: $(e).position().top + 110})
					},
					last: function(){
						var index = -1;
						for(var i=0; i<this.length; i++) if(this[i] != undefined) index = i;
						return index;
					},
					count: function(){
						var count = 0;
						for(var i=0; i<this.length; i++) if(this[i] != undefined) count++;
						return count;
					}
				},
				slots: {
					bind: function(){
						this.goods.bind();
					},
					save: function(){
						return {
							goods: this.goods.save()
						};
					},
					load: function(data) {
						this.preload();
						
						data = (data == undefined) ? {} : data;
						this.goods.load(data.goods);
					},
					preload: function(data) {
						for(var i=0; i<this.length; i++) delete this[i];
						this.length = 0;
					},
					init: function() {
						for(var i=0; i<this.length; i++) if(this[i] != undefined) this.destruct(this[i]);
						this.goods.init();
					},
					destruct: function(slot) {
						if(slot.e != undefined) {
							$(slot.e).remove;
							delete slot.e;
						};
					},
					redraw: function() {
						for(var i=0; i<this.length; i++) {
							if(this[i] != undefined) this.draw(this[i]);
						};
						
						this.goods.redraw();
					},
					draw: function(slot) {
						cat.autosave();
						var fields = {name:null,code:null,price:null,sprice:null,exist:null,desc:null,img:null};
						
						for(var key in fields) {
							if(slot.goods != undefined && slot.goods.data != undefined && slot.goods.data[key] != undefined) {
								var val = slot.goods.data[key];
								switch(key) {
									case 'name': $(slot.e).find('.a-2-3-1-cell-name .a-2-3-1-cell-textarea').removeClass('ph').val(val); break;
									case 'code': $(slot.e).find('.a-2-3-1-cell-code .a-2-3-1-cell-textarea').removeClass('ph').val(val); break;
									case 'price': $(slot.e).find('.a-2-3-1-cell-price .a-2-3-1-cell-textarea').removeClass('ph').val(val); break;
									case 'sprice': $(slot.e).find('.a-2-3-1-cell-sprice .a-2-3-1-cell-textarea').removeClass('ph').val(val); break;
									case 'desc': $(slot.e).find('.a-2-3-1-cell-desc .a-2-3-1-cell-textarea').removeClass('ph').val(val); break;
									case 'exist': 
										var select = $(slot.e).find('.a-2-3-1-cell-select');
										if(select.length > 0) $(slot.e).find('.a-2-3-1-cell-select').data().simpleSelect.set(val); 
									break;
									case 'img': $($(slot.e).find('.a-2-3-1-cell-img')).css({backgroundImage: 'url(/'+ val.src +')'}).addClass('bgSizeContain'); break;
								};
							} else {
								switch(key) {
									case 'name': 
										var textarea = $(slot.e).find('.a-2-3-1-cell-name .a-2-3-1-cell-textarea');
										textarea.val('').blur();   
									break;
									case 'code': 
										var textarea = $(slot.e).find('.a-2-3-1-cell-code .a-2-3-1-cell-textarea');
										textarea.val('').blur();       
									break;
									case 'price': 
										var textarea = $(slot.e).find('.a-2-3-1-cell-price .a-2-3-1-cell-textarea');
										textarea.val('').blur();    
									break;
									case 'sprice': 
										var textarea = $(slot.e).find('.a-2-3-1-cell-sprice .a-2-3-1-cell-textarea');
										textarea.val('').blur();   
									break;
									case 'desc': 
										var textarea = $(slot.e).find('.a-2-3-1-cell-desc .a-2-3-1-cell-textarea');
										textarea.val('').blur();    
									break;
									case 'exist':
										if($(slot.e).find('.a-2-3-1-cell-select').data() && $(slot.e).find('.a-2-3-1-cell-select').data().simpleSelect != undefined) $(slot.e).find('.a-2-3-1-cell-select').data().simpleSelect.set('');
									break;
									case 'img': $($(slot.e).find('.a-2-3-1-cell-img')).css({backgroundImage: ''}).removeClass('bgSizeContain'); break;
								};
							};
						};
					},
					build: function(slot, cell) {
						var cell = $(cell).removeClass('a-2-3-1-cell');
						var e = $('<div class = "a-2-3-1-cell dndSlot"></div>').append(cell);
						slot.e = e;
						e.data('slot', slot);
						return e;
					},
					add: function(i) {
						var i = parseInt(i);
						if(i==undefined) {
							var index = this.length;
							this.length++;
							
							this[index] = {index:index};
						} else if(this[i]==undefined) {
							var index = i;
							this.length = this.length > i ? this.length : i+1;
							this[index] = {index:index};
						}
						else var index = i;
						
						return this[index];
					},
					update: function(e, values) {
						cat.autosave();
						var index = $(e).parents('.a-2-3-1-cell').data().slot.index;
						if(this[index].goods == undefined) cat.s[2].panels.goods.build(this.goods.add(this[index], values));
						else {
							this.goods.update(this[index].goods, values);
							cat.s[2].slots.goods.checknremove(this[index].goods);
						};
					},
					sctollTo: function(e){
						$('#a-wp1').stop().animate({scrollTop: $(e).position().top+80});
					},
					move: function(from, to) {
						cat.autosave();
						if(from.e != undefined) {
							var fromSlot = from,
								toSlot = to, 
								from = $(from.e),
								to = $(to.e),
								fromParent = from.parent(),
								toParent = to.parent(),
								fromIndex = fromSlot.index,
								toIndex = toSlot.index;
								
							fromParent.append(to);
							toParent.append(from);
							fromSlot.index = toIndex;
							toSlot.index = fromIndex;
							this[fromIndex] = toSlot;
							this[toIndex] = fromSlot;
						} else {
							var fromIndex = from.index;
							var toIndex = to.index;
							
							if(fromIndex == toIndex) return;							
							else if(this[fromIndex].goods == undefined && this[toIndex].goods == undefined) return;	
							else if(this[fromIndex].goods == undefined) {
								this[fromIndex].goods = this[toIndex].goods;
								this[fromIndex].goods.slot = this[fromIndex];
								if(toIndex > -1) delete this[toIndex].goods;
							} else if(this[toIndex].goods == undefined) {
								this[toIndex].goods = this[fromIndex].goods;
								this[toIndex].goods.slot = this[toIndex];
								if(fromIndex > -1) delete this[fromIndex].goods;
							} else {
								var buf = this[toIndex].goods;
								this[toIndex].goods = this[fromIndex].goods;
								this[toIndex].goods.slot = this[toIndex];
								if(fromIndex > -1) {
									this[fromIndex].goods = buf;
									this[fromIndex].goods.slot = this[fromIndex];
								}
							};
						};
						/*

						*/
					},
					goods: {
						bind: function(){
							this.img.bind();
						},
						save: function(){
							var list = {};
							for(var i=0; i<this.length;i++) {
								if(this[i] != undefined){
									list[i] = {
										data: {},
										slot: this[i].slot.index
									};
									if(this[i].data.name != undefined) list[i].data.name = this[i].data.name;
									if(this[i].data.code != undefined) list[i].data.code = this[i].data.code;
									if(this[i].data.price != undefined) list[i].data.price = this[i].data.price;
									if(this[i].data.sprice != undefined) list[i].data.sprice = this[i].data.sprice;
									if(this[i].data.desc != undefined) list[i].data.desc = this[i].data.desc;
									if(this[i].data.exist != undefined) list[i].data.exist = this[i].data.exist
									if(this[i].data.img != undefined) list[i].data.img = this[i].data.img.iid;
								};
							};
							return {
								list: list
								//img: this.img.save()
							};
						},
						load: function(data) {
							cat.imgs.clear();
							this.preload();
							data = (data == undefined) ? {} : data;
							
							if(data.list != undefined) {
								for(var key in data.list) {
									var val = data.list[key];
									for(var key2 in val.data) {
										var parent = [];
										switch(key2) {
											case 'name': val.data[key2] = html_entity_decode(val.data[key2]); break;
											case 'code': val.data[key2] = html_entity_decode(val.data[key2]); break;
											case 'price': val.data[key2] = html_entity_decode(val.data[key2]); break;
											case 'sprice': val.data[key2] = html_entity_decode(val.data[key2]); break;
											case 'desc': val.data[key2] = html_entity_decode(val.data[key2]); break;
											case 'exist': val.data[key2] = html_entity_decode(val.data[key2]); break;
											case 'img': 
												var img = cat.imgs.get(val.data[key2]);
												if (img == undefined) {
													delete val.data[key2];
													continue;
												} else val.data[key2] = img;
											break;
										};
									};
									var goods = this.add(cat.s[2].slots.add(val.slot), val.data);
									if(val.data.img != undefined && typeof val.data.img == 'object') img.parents[goods.index] = goods;
								};
							};

							this.img.load(data.img);
						},
						preload: function(data) {
							for(var i=0; i<this.length; i++) delete this[i];
							this.length = 0;
						},
						init: function(){
							this.img.init();
						},
						redraw: function(){
							for(var i=0;i<this.length;i++) if(this[i] != undefined) cat.s[2].panels.goods.build(this[i]);
							
							this.img.redraw();
						},
						count: function() {
							var count = 0;
							for(var i=0; i<this.length;i++) if(this[i] != undefined) count++;
							return count;
						},
						update: function(goods, value) {
							cat.autosave();
							goods.data = goods.data == undefined ? {} : goods.data;
							for(var key in value) goods.data[key] = value[key];
						},
						add: function(slot, value, i) {
							if(i != undefined) {
								i = parseInt(i);
								var index = i;
								if(this[i] != undefined) {
									for(var key in value) this[i].data[key] = value[key];
								} else {
									slot.goods = this[index] = {
										data: value,
										slot: slot,
										index: index
									};
									this.length = this.length > index ? this.length : index+1;
								};
							} else {
								var index = this.length;
								slot.goods = this[index] = {
									data: value,
									slot: slot,
									index: index
								};
								this.length++;
							}
							return this[index];
						},
						checknremove: function(goods) {
							var readyfordelete = true;
							for(var key in goods.data) {
								switch(key) {
									case 'name': if(trim(goods.data[key]) != '') readyfordelete = false; else delete goods.data[key]; break;
									case 'code': if(trim(goods.data[key]) != '') readyfordelete = false; else delete goods.data[key]; break;
									case 'price': if(trim(goods.data[key]) != '') readyfordelete = false; else delete goods.data[key]; break;
									case 'sprice': if(trim(goods.data[key]) != '') readyfordelete = false; else delete goods.data[key]; break;
									case 'desc': if(trim(goods.data[key]) != '') readyfordelete = false; else delete goods.data[key]; break;
									case 'exist': if(goods.data[key] != '') readyfordelete = false; else delete goods.data[key]; break;
									case 'img': if(typeof goods.data[key] == 'object') readyfordelete = false; else delete goods.data[key]; break;
								};
							};
							if(readyfordelete) {
								this.remove(goods);
								return false;
							} else return true;
						},
						remove: function(goods){
							if(goods != undefined) {
								$(this[goods.index].e).remove();
								delete this[goods.index].slot.goods;
								if(this[goods.index].data != undefined && this[goods.index].data.img != undefined) {delete this[goods.index].data.img.parents[goods.index];};
								delete this[goods.index];
								return true;
							} else return false;
						},
						img: {
							common: 'static/templates/common/img/a2_addcat/a-2-2-2-2-preview-cell-img.png',
							bind: function(){
								this.window.bind();
							},
							save: function(){},
							load: function() {},
							init: function(){},
							redraw: function(){
								this.window.redraw();
							},
							add: function(val) {
								var index = this.length;
								this[index] = (val == undefined) ? {} : val;
								this[index].parents = {};
								this[index].index = index;
								this.length++;
								return this[index];
							},
							window: {
								opened: false,
								bind: function(){
									$('#a-2-3-3-right-line-checkbox-field-all').click(function(){cat.s[2].slots.goods.img.window.toggleAllCheckbox();});
							
									$('#a-2-3-3-close').click(function() {cat.s[2].slots.goods.img.window.onClose();});
									$('#a-2-3-3-remove').click(function() {if(!$(this).hasClass('disabled') && confirm('Вы точно хотите удалить отмечанные изображения безвозвратно и без возможности восстановления?')) cat.s[2].slots.goods.img.window.removeChecked();});	
								
									$('#a-2-3-3-input').change(function() {cat.s[2].slots.goods.img.window.addBefore(); document.forms['a-2-3-3-form'].submit();});
									$('#a-2-3-3-right').click(function(event){event.stopPropagation();});
									
									$('#a-2-3-3-right-line-date').simpleSort({
										value: '.a-2-3-3-right-line-date-hide',
										target: '.a-2-3-3-right-line'
									});
									$('#a-2-3-3-right-line-name').simpleSort({
										value: '.a-2-3-3-right-line-wp2',
										target: '.a-2-3-3-right-line'
									});
									$('#a-2-3-3-right-line-size').simpleSort({
										value: '.a-2-3-3-right-line-size',
										target: '.a-2-3-3-right-line'
									});
								},
								save: function() {},
								load: function() {},
								init: function() {},
								redraw: function() {
									if(this.opened) this.open(cat.s[2].slots[this.parent].e);
									$('.a-2-3-3-img-wp, .a-2-3-3-right-line').remove();
									
									var imgs = cat.imgs.getAll();
									for(var key in imgs) this.build(imgs[key]);
									this.recountSize();
									this.recountCount();
								},
								build: function(img) {
									var imgDiv = $('<div class = "a-2-3-3-img"></div>').css({backgroundImage: 'url(/'+ img.src +')'}).addClass('bgSizeContain');
									var wpDiv = $('<div class = "a-2-3-3-img-wp"></div>').append(imgDiv).bind({
										dblclick: function(event){ 
											cat.s[2].slots.goods.img.window.setImg(this);
											cat.s[2].slots.goods.img.window.onClose();
											event.stopPropagation();
										},
										click: function(event){
											cat.s[2].slots.goods.img.window.onWpClick(this, event);
											event.stopPropagation();
										},
										mouseover: function(){cat.s[2].slots.goods.img.window.onWpMouseOver(this);},
										mouseout: function(){cat.s[2].slots.goods.img.window.onWpMouseOut(this);}
									});
									$('#a-2-3-3-wp').append(wpDiv);
									
									var nowDate = new Date();
									var saveDate = new Date(img.addtime*1000);
									var time = (saveDate.getDate() == nowDate.getDate() && saveDate.getFullYear() == nowDate.getFullYear() && saveDate.getMonth() == nowDate.getMonth()) ? (saveDate.getHours()+':'+saveDate.getMinutes()) : (saveDate.getDate()+'.'+saveDate.getMonth()+'.'+saveDate.getFullYear());
									img.size = Math.round(img.size / 1024 / 1024 * 100) / 100;
									
									var tr = $('<tr class = "a-2-3-3-right-line"><td class = "a-2-3-3-right-line-cell a-2-3-3-right-line-checkbox"><input type = "checkbox" class = "a-2-3-3-right-line-checkbox-field"></td><td class = "a-2-3-3-right-line-cell a-2-3-3-right-line-name"><div class = "a-2-3-3-right-line-wp1"><div class = "a-2-3-3-right-line-wp2">'+img.name+'</div></div></td><td class = "a-2-3-3-right-line-cell a-2-3-3-right-line-size">'+img.size+'</td><td class = "a-2-3-3-right-line-cell a-2-3-3-right-line-date">'+time+'<span class = "a-2-3-3-right-line-cell a-2-3-3-right-line-date-hide">'+img.addtime+'</span></td></tr>');
									tr.bind({
										mouseover: function(){cat.s[2].slots.goods.img.window.onTrMouseOver(this);},
										mouseout: function(){cat.s[2].slots.goods.img.window.onTrMouseOut(this);},
										click: function(event){cat.s[2].slots.goods.img.window.onTrClick(this);}
									});
									
									$('#a-2-3-3-right-body').prepend(tr);
									img.tr = tr;
									img.wp = wpDiv;

									wpDiv.data().img = img;
									tr.data().img = img;
								},
								onOpen: function(e){
									this.opened = true;			
									var slot = $(e).hasClass('a-2-3-1-cell') ? $(e).data().slot : $(e).parents('.a-2-3-1-cell').data().slot;
									this.slot = slot;									
									cat.s[2].panels.goods.clipToBody();
									this.unsetAllCheckbox();
									if(slot.goods != undefined && slot.goods.data.img != undefined && slot.goods.data.img && cat.imgs.get(slot.goods.data.img.iid) != undefined) {
										this.setImg(slot.goods.data.img.tr);
									};
									s.window.open('a-2-3-3');
								},
								onClose: function() {
									if(this.checked == undefined) {
										if(this.slot.goods != undefined && this.slot.goods.data.img != undefined) {
											var goods = this.slot.goods;
											if(this.slot.goods.data.img.parents[this.slot.goods.index] != undefined) delete this.slot.goods.data.img.parents[this.slot.goods.index]
											delete this.slot.goods.data.img;
											cat.s[2].slots.goods.checknremove(this.slot.goods);
										} else {
											var goods = this.slot.goods;
										};
									} else {
										if(this.slot.goods == undefined) {
											var goods = cat.s[2].slots.goods.add(this.slot, {img:this.checked});
										} else {
											var goods = this.slot.goods;
											cat.s[2].slots.goods.update(this.slot.goods, {img:this.checked});
											cat.s[2].slots.goods.checknremove(goods);
										};
										this.checked.parents[goods.index] = (goods);
										delete this.checked;
									}

									this.opened = false;
									cat.s[2].panels.goods.clipToScroll();
									if(goods != undefined) cat.s[2].panels.goods.build(goods);
									cat.s[2].slots.draw(this.slot);
									this.clear();
									s.window.close('a-2-3-3');
								},
								clear: function() {
									$('#a-2-3-3-right-line-checkbox-field-all').removeAttr('checked');
									$('.a-2-3-3-img-wp, .a-2-3-3-right-line').removeClass('active');
								},
								
								addBefore: function() {
									$('#a-2-3-3-2-add').addClass('disabled');
									s.window.msg.show('Загрузка...', 'Процесс загрузки файлов может занять некоторое время, пожалуйста, подождите');
									
									$(document).stopTime('iframe').oneTime('120s', 'iframe', function() {
										s.window.msg.show('.::.', 'Ответа от сервера нет более 2 минут. Скорее всего произошла ошибка, попробуйте повторить попытку или обратитесь к администратору');
									});
								},
								addAfter: function(response) {
									$(document).stopTime('iframe');
									if(typeof response != 'object') {alert('Input error 1210');return;};
									if(response.file != undefined) {
										for (var key in response.file) {
											var val = response.file[key];
											
											this.build(cat.imgs.add(val));
										};
										this.recountSize();
										this.recountCount();
										
										s.window.msg.show('.::.', response.msg);
									} else {
										s.window.msg.show('.::.', response.msg);
									};
									$('#a-2-3-3-2-add').removeClass('disabled');
								},
								recountCount: function(){
									$('#a-2-3-3-right-foot-count').html(cat.imgs.count());
								},
								recountSize: function(){
									$('#a-2-3-3-right-foot-size').html(cat.imgs.size());
								},
								setAllCheckbox: function(){
									var imgs = cat.imgs.getAll();
									for(var key in imgs) imgs[key].tr.find('.a-2-3-3-right-line-checkbox-field').attr('checked','checked');
								},
								unsetAllCheckbox: function(){
									var imgs = cat.imgs.getAll();
									for(var key in imgs) imgs[key].tr.find('.a-2-3-3-right-line-checkbox-field').removeAttr('checked','checked');
								},
								toggleAllCheckbox: function(){
									if($('#a-2-3-3-right-line-checkbox-field-all').attr('checked') == 'checked') this.setAllCheckbox(); 
									else this.unsetAllCheckbox();
								},
								removeChecked: function() {
									var checked = $('.a-2-3-3-right-line-checkbox-field:checked').parents('.a-2-3-3-right-line');
									if(checked.length > 0) {
										var remList = {wp: $(),tr: $(),iid:[]},
											redrawSlots = $();
										checked.each(function(){
											var img = $(this).data().img;
											if(cat.s[2].slots.goods.img.window.checked != undefined && cat.s[2].slots.goods.img.window.checked.iid == img.iid) delete cat.s[2].slots.goods.img.window.checked;
											remList.wp = remList.wp.add(img.wp);
											remList.tr = remList.tr.add(img.tr);
											remList.iid.push(img.iid);
											cat.imgs.remove(img.iid);
											for (var index in img.parents) {
												var val = img.parents[index];
												delete val.data.img;
												redrawSlots = redrawSlots.add(val.slot.e);
												cat.s[2].slots.goods.checknremove(val);
											};
										});
										remList.wp.remove();
										remList.tr.remove();
										redrawSlots.each(function(){
											var slot = $(this).data().slot;
											cat.s[2].slots.draw(slot);
											cat.s[2].panels.goods.build(slot.goods);
										});
										this.recountSize();
										this.recountCount();
										s.ajax({
											url: '?catalog&imgs&remove',
											data: 'h='+cat.h+'&iids=' + $.toJSON(remList.iid),
											success:{
												onJSON: function(request){
													if(request.err == 0) s.window.msg.show('.::.',request.msg);
													else s.window.msg.show('.::.','Внутреняя ошибка сервера');
												}
											}
										});
									};
								},
								setImg: function(e) {
									var img = $(e).data().img; 
									this.checked = img;
									$('.a-2-3-3-img-wp, .a-2-3-3-right-line').removeClass('active');
									$(img.wp).add(img.tr).addClass('active');	
								},
								unsetImg: function() {
									$('.a-2-3-3-img-wp, .a-2-3-3-right-line').removeClass('active');
									delete this.checked;
								},
								toggleImg: function(e) {
									var img = $(e).data().img; 
									if(this.checked == undefined || this.checked.iid != img.iid) {
										this.setImg(e);
										return true;
									} else {
										this.unsetImg();
										return false;
									};
								},
								onTrMouseOver: function(e){
									$(e).addClass('hover').data().img.wp.addClass('hover');
								},
								onTrMouseOut: function(e){
									$(e).removeClass('hover').data().img.wp.removeClass('hover');
								},
								onTrClick: function(e){
									var img = $(e).data().img;
									this.toggleImg($(e));
									var abs = $('#a-2-3-3-wp').scrollTop();
									$('#a-2-3-3-wp').stop().animate({scrollTop: $(e).data().img.wp.position().top + abs});
								},
								onWpClick: function(e, event){
									if(event.ctrlKey) {
										var checkbox = $(e).data().img.tr.find('.a-2-3-3-right-line-checkbox-field');
										if(checkbox.attr('checked') == 'checked') checkbox.removeAttr('checked');
										else checkbox.attr('checked','checked');
									} else this.toggleImg(e);
									var abs = $('#a-2-3-3-right').scrollTop();
									$('#a-2-3-3-right').stop().animate({scrollTop: $(e).data().img.tr.position().top+abs});
								},
								onWpMouseOver: function(e){
									$(e).addClass('hover').data().img.tr.addClass('hover');
								},
								onWpMouseOut: function(e){
									$(e).removeClass('hover').data().img.tr.removeClass('hover');
								},
							}
						}
					}
				},
				check: function() {
					this.ready = true;
				},
				error: function() {s.window.msg.show('.::.', $('#a-2-3-err').html());},
				ready: false
			},
			3: {
				bind: function(){
				
				},
				save: function(){
					var text = {};

					//for(var key in this.text) {
					//	text[key] = encodeURIComponent(this.text[key]);
					//}

					return {
						ready: this.ready == undefined ? true : this.ready,
						text: this.text
					}
				},
				load: function(data) {
					data = (data == undefined) ? {} : data;
				
					this.ready = (data.ready == undefined) ? true : data.ready;
					if(data.text != undefined) for(var key in data.text) data.text[key] = decodeURIComponent(data.text[key]);
					
					this.text = data.text == undefined ? {} : data.text;
				},
				init: function() {
					this.design = cat.s[0].design.get(679);
					this.path = cat.s[0].design.path;
					this.e = {front:{},left:{},right:{},back:{}};
				},
				redraw: function(){
					$('.a-2-4-1-input').each(function(){$(this).val('');})
					this.add('front').add('back');
				},
				add: function(type){
					var page = $('#a-2-4-1-' + type).empty().css({backgroundImage: 'url(/'+ this.path.root + this.design.name + this.path.postfix.s2[type] +')'});
					var list = $();
					var types = this.design.types;
					for(var key in types) {
						var val = types[key];
						if(this.design.css[type][key] != undefined) {
							var css = this.design.css[type][key];
							var text = this.text[key] == undefined ? '' : this.text[key];
							var textarea = $('<textarea ph = "'+val.name+'" class = "a-2-4-1-input"></textarea>')
							.css(css).val(html_entity_decode(text)).appendTo(page).data('type', key).bind({
								blur: function(){
									cat.s[3].set(this);
									cat.s.check()
								},
								keyup: function() {
									cat.s[3].update(this);
								}
							});
							this.e[type][key] = textarea;
							list = list.add(textarea);
						};
					};
					list.ph();
					return this;
				},
				set: function(e){
					var type = $(e).data().type;
					this.text[type] = $(e).val();
					if(trim(this.text[type]) == '') delete this.text[type];
				},
				update: function(e) {
					var type = $(e).data().type;
					var front = this.e.front[type] == undefined ? $() : this.e.front[type];
					var left = this.e.left[type] == undefined ? $() : this.e.left[type];
					var right = this.e.right[type] == undefined ? $() : this.e.right[type];
					var back = this.e.back[type] == undefined ? $() : this.e.back[type];
					var other_e = front.add(left).add(right).add(back).not(e);
					var val = $(e).val();
					cat.autosave();
					
					other_e.val(val).blur();
				},
				check: function() {
					var ready = true;
					
					//$('.a-2-4-1-input').each(function(){
						//var type = cat.s[3].design.types[$(this).data().type];
						//if(($(this).val() == $(this).attr('ph') || $(this).val() == '') && type.required) ready = false;
					//});
					
					if(ready) {
						$('#a-2-4-next').removeClass('disabled');
						this.ready = true;						
					}
					else {
						$('#a-2-4-next').addClass('disabled');
						this.ready = false;
					}
				},
				error: function() {s.window.msg.show('.::.', $('#a-2-4-err').html());}
			},
			4: {
				bind: function(){
					$('#a-2-5-preview').bind('click',function(){cat.view.load().init().redraw();});
					$('#a-2-5-exportpdf').bind('click',function(){cat.s[4].getPdf();});
					$('#a-2-5-exportexcel').bind('click',function(){cat.s[4].getExcel();});
					$('#a-2-5-exportissuu').bind('click',function(){cat.s[4].getIssuu();});
					$('.a-2-5-input-field').click(function(event){
						var checkbox = $(this).find(':checkbox');
						checkbox.prop('checked', !checkbox.prop('checked'));
					});
					$('.a-2-5-input-checkbox').click(function(event){event.stopPropagation();});
						
					$('#a-2-5-importexcel').click(function(){
						var version = cat.versions.get(cat.vid);
						$('#importform')
							.find('.window-title').html('Импорт из Excel').parent()
							.find('form').addClass('form_import_excel').attr('action','?catalog&import&excel&data[cid]='+cat.cid+'&data[vid]='+version.vid+'&data[name]='+cat.name)
							.find('[name=callback]').val("cat.s[4].importExcelAfter")
							.next().html('<a href = "static/catalog/template.xls" target = "_blank" style = "text-decoration:underline;">скачать шаблон</a>');
						s.window.open('importform');
					});
					$('.form_import_excel').live('submit', function(){
						cat.s[4].importExcelBefore();
					});
						
					$('#a-2-5-order-button').click(function(){
						s.window.open('a-2-5-order');
						//s.window.msg.show('Работаем..','Увы, но функция находится в разработке');
						
						return;
						s.ajax({
							url: '?catalog&order',
							//data: 'h='+cat.h+'&cid='+cat.cid+'&vid='+version.vid,
							success:{
								onJSON: function(request) {
									//if(request.data != undefined) {
									
								}
							}
						});
					});
				},
				save: function(){
					return {
						ready: this.ready == undefined ? true : this.ready
					};
				},
				load: function(data) {
					this.ready = true;	
				},
				init: function() {},
				redraw: function(){
					this.check();
				},
				check: function() {
					if(this.ready) {
						$('#a-2-6-next').removeClass('disabled');
						this.ready = true;						
					}
					else {
						$('#a-2-6-next').addClass('disabled');
						this.ready = false;
					}
				},
				getPdf: function() {
					var version = cat.versions.get(cat.vid);
					if(version != undefined) {
						if(confirm('При экспортирование каталога он будет сохранен. Продолжить?')) {
							cat.versions.write({
								type:2,vid:version.vid,name:version.name,silent:true,
								onJSON: function(request){
									if(request.err == 0) {
										s.ajax({
											url: '?catalog&convert&pdf',
											data: 'h='+cat.h+'&cid='+cat.cid,
											success: {
												onJSON: function(request){
													//window.open('http://77.41.59.217/static/pdf/tmp10.pdf');
													if(request.err == 0) {
														window.open(request.url);
														s.window.msg.show('.::.', request.msg);
													}
												}
											}
										});
									};
								}
							});
						};
						//$('#wait').show();
					} else {
						s.window.msg.show('.::.', 'Пожалуйста, сохраните хотя бы одну версию каталога');
					};
				},
				getIssuu: function() {
					var version = cat.versions.get(cat.vid);
					if(version != undefined) {
						if(confirm('При экспортирование каталога он будет сохранен. Продолжить?')) {
							cat.versions.write({
								type:2,vid:version.vid,name:version.name,silent:true,
								onJSON: function(request){
									if(request.err == 0) {
										s.ajax({
											url: '?catalog&export&issuu',
											data: 'h='+cat.h+'&cid='+cat.cid,
											success: {
												onJSON: function(request){
													if(request.err == 0) {
														s.window.msg.show('.::.', 'Идет конвертация каталога, пожалуйста подождите 1 минуту');
														$(document).stopTime('issuu').oneTime(60000, 'issuu', function() {
															window.open(request.url);
															s.window.msg.show('.::.', request.msg);
														});
													}
												}
											}
										});
									};
								}
							});
						};
						//$('#wait').show();
					} else {
						s.window.msg.show('.::.', 'Пожалуйста, сохраните хотя бы одну версию каталога');
					};
				},				
				getExcel: function() {
					var version = cat.versions.get(cat.vid);
					if(version != undefined) {
						if(confirm('При экспортирование каталога он будет сохранен. Продолжить?')) {
							cat.versions.write({
								type:2,vid:version.vid,name:version.name,silent:true,
								onJSON: function(request){
									if(request.err == 0) {
										s.ajax({
											url: '?catalog&export&excel',
											data: 'h='+cat.h+'&cid='+cat.cid+'&vid='+version.vid,
											success: {
												onJSON: function(request){
													if(request.err == 0) {
														window.open(request.url);
														s.window.msg.show('.::.', request.msg);
													}
												}
											}
										});
									};
								}
							});
						};
						//$('#wait').show();
					} else {
						s.window.msg.show('.::.', 'Пожалуйста, сохраните хотя бы одну версию каталога');
					};
				},
				importExcelBefore: function() {
					if($('#importform').find('.file').val() != '') {
						var version = cat.versions.get(cat.vid);
						if(version != undefined) {
							if(confirm('Данные текущей версии будут перезаписаны. Продолжить?')) {
								s.window.close('importform');
								s.window.msg.show('Загрузка...', 'Процесс загрузки файла может занять некоторое время, пожалуйста, подождите');
								$(document).stopTime('iframe').oneTime('120s', 'iframe', function() {
									s.window.msg.show('.::.', 'Ответа от сервера нет более 2 минут. Скорее всего произошла ошибка, попробуйте повторить попытку или обратитесь к администратору');
								});
							};
						} else {
							s.window.msg.show('.::.', 'Пожалуйста, сохраните хотя бы одну версию каталога');
						};
					} else s.window.msg.show('.::.', 'Пожалуйста, выберите файл');
				},
				importExcelAfter: function(response) {
					$(document).stopTime('iframe');
					s.window.msg.show('.::.', response.msg);
					var e = cat.versions.list[response.vid].readItem;
					delete cat.versions.cache[response.vid];
					cat.versions.read(e);
				},
				
				error: function() {}
			}
		}
	};
	
	$('#wait').hide();
});