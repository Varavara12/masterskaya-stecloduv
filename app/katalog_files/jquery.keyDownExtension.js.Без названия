;(function($){$.fn.keydownKey = function ( key, handler ) {var specificKeyHandler = null;if (typeof(key) == "number") specificKeyHandler = function( eventObject ) { if (eventObject.keyCode == key ) handler(eventObject); };else if (typeof(key) == "string") specificKeyHandler = function( eventObject ) { if (String.fromCharCode(eventObject.keyCode) == key.toUpperCase() ) handler(eventObject); };else return this;this.keydown( specificKeyHandler );return this;};})(jQuery);(function($){$.fn.keydownKeyToggle = function ( key, handler1, handler2 ){var callback = new JQueryExtensionFunctionToggle( [ handler1, handler2] );var specificKeyHandler = null;if (typeof(key) == "number") specificKeyHandler = function( eventObject ) { if (eventObject.keyCode == key ) callback.execute( eventObject ); };else if (typeof(key) == "string") specificKeyHandler = function( eventObject ) { if (String.fromCharCode(eventObject.keyCode) == key.toUpperCase() ) callback.execute( eventObject ) ;  };else return this;this.keydown( specificKeyHandler );return this;};})(jQuery);(function($){$.fn.keydownKeyList = function ( key, handlerList ){var callback = new JQueryExtensionFunctionToggle( handlerList );var specificKeyHandler = null;if (typeof(key) == "number") specificKeyHandler = function( eventObject ) { if (eventObject.keyCode == key ) callback.execute( eventObject ); };else if (typeof(key) == "string") specificKeyHandler = function( eventObject ) { if (String.fromCharCode(eventObject.keyCode) == key.toUpperCase() ) callback.execute( eventObject ) ;  };else return this;this.keydown( specificKeyHandler );return this;};})(jQuery);function JQueryExtensionFunctionToggle( HandlerList ){var handlerList = HandlerList;var handlerIndex = 0;this.execute = function ( eventObject ){var handler = handlerList[handlerIndex++];handler(eventObject);if (handlerIndex >= handlerList.length ) handlerIndex = 0;};}